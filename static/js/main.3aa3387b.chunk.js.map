{"version":3,"sources":["Assets/images/trial.png","Assets/images/Avatar.png","Assets/videos/trial.mp4","Components/Notify.js","Components/Chat/URLMetadata.js","js/utils.js","Components/Chat/Chat.js","Components/FullScreenView/FullScreenView.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Notify","iconStyle","fontSize","this","props","size","color","positionStyle","position","top","left","right","bottom","className","display","style","React","Component","URLMetadata","state","loading","metadata","error","setState","urlMetadata","url","then","console","log","setTimeout","prevProps","prevState","snapshot","type","width","src","image","alt","href","target","rel","title","description","Array","prototype","lastFind","predicate","i","length","x","MINUTE_MILLIS","HOUR_MILLIS","DAY_MILLIS","getTimeAgo","time","now","Date","diff","Math","floor","currentTime","getDate","getMonth","getFullYear","linkRegex","onlySpacesRegex","linksSplitter","text","split","map","word","match","ChatSearchBar","onSearchInput","value","onSearch","onChange","ChatListItem","getStatusWithTimestamp","utils","interval","setInterval","forceUpdate","clearInterval","isThisCurrentChat","currentChatId","id","onClick","updateCurrentChat","avatar","name","desc","unreadMsgCount","ChatListItems","list","listItem","key","lastSeen","messageCount","MessageDeliveryStatusIcons","messageDeliveryStatus","status","ChatList","search","getFilteredList","chat","filter","includes","unread","messages","message","by","read","data","ChatHeader","closeCurrentChat","ChatLine","showFullScreen","context","video","getTime","getHours","getMinutes","getConvertedMessage","textAndLinks","link","item","linkAndMessage","caption","thumbnail","message_by","chatType","contextTypes","PropTypes","defaultProps","DateMarker","date","ChatContent","loadPreviousChat","previousChatUpdate","createMessagesWithDateObjects","reduce","accumulator","currentMessage","currentDate","newDate","push","dateMarker","unreadPointer","scrollIntoView","behavior","endPointer","l","leftChain","rightChain","compare2Objects","y","p","isNaN","RegExp","String","Number","toString","Object","isPrototypeOf","constructor","indexOf","hasOwnProperty","pop","arguments","nextProps","nextState","nextContext","removeUnreadPointer","onScroll","event","scrollTop","hasPreviousChat","ref","div","EmojiPanelButton","showEmojiPanel","toggleEmojiPanel","onEmojiSelect","buttonProps","children","set","onSelect","MessageInputWithURLMetadata","inp","reference","ChatInput","getLink","onMessageInput","onMessageSubmit","preventDefault","updateMessage","uuid","v4","emojiUpdate","emoji","native","messageInput","focus","onSubmit","ChatBody","currentChat","find","Chat","FullScreenView","content","isFullScreen","hideFullScreen","view","controls","playing","height","childContextTypes","func","App","require","message_id","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3aa3387b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/trial.b337d9e6.png\";","module.exports = __webpack_public_path__ + \"static/media/Avatar.037763eb.png\";","module.exports = __webpack_public_path__ + \"static/media/trial.24867704.mp4\";","import React from \"react\";\n\nclass Notify extends React.Component {\n    render() {\n        let iconStyle = {\n            fontSize: this.props.size + \"pt\",\n            color: this.props.color,\n        };\n        let positionStyle = {\n            position: \"absolute\",\n        };\n        switch (this.props.position) {\n            case \"top-left\":\n                positionStyle.top = 0;\n                positionStyle.left = 0;\n                break;\n            case \"top-right\":\n                positionStyle.top = 0;\n                positionStyle.right = 0;\n                break;\n            case \"bottom-left\":\n                positionStyle.bottom = 0;\n                positionStyle.left = 0;\n                break;\n            case \"bottom-right\":\n                positionStyle.bottom = 0;\n                positionStyle.right = 0;\n                break;\n            default:\n                break;\n        }\n        return (\n            <span className={this.props.display ? \"notify-icon\" : \"hide\"} style={positionStyle}>\n                <i className=\"fa fa-circle \" style={iconStyle}> </i>\n            </span>\n        );\n    }\n}\n\nexport default Notify;","import React from \"react\";\nimport urlMetadata from 'url-metadata';\nimport ReactLoading from 'react-loading';\nimport PropTypes from 'prop-types';\n\nimport './Assets/css/metadata.css';\n\nexport default class URLMetadata extends React.Component {\n    static propTypes = {\n        url: PropTypes.string,\n    };\n\n    state = {\n        loading: false,\n        metadata: null,\n        error: null,\n    };\n\n    componentDidMount() {\n        this.setState({\n            loading: true,\n        });\n        urlMetadata(`https://cors-anywhere.herokuapp.com/${this.props.url}`).then(\n            (metadata) => {\n                this.setState({\n                    loading: false,\n                    metadata,\n                });\n                console.log(metadata);\n            },\n            function (error) {\n                this.setState({\n                    loading: false,\n                    error,\n                });\n                console.log(error);\n            });\n        setTimeout(() => {\n            if(this.state.loading) {\n                this.setState({\n                    loading: false,\n                    error: true,\n                });\n            }\n        }, 10000);\n\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        // if(this.props.url !== prevProps.url) {\n        //     console.log(this.props.url);\n        //     this.setState({\n        //         loading: true,\n        //     });\n        //     urlMetadata(`https://cors-anywhere.herokuapp.com/${this.props.url}`).then(\n        //         (metadata) => {\n        //             this.setState({\n        //                 loading: false,\n        //                 metadata,\n        //             });\n        //             console.log(metadata);\n        //         },\n        //         function (error) {\n        //             this.setState({\n        //                 loading: false,\n        //                 error,\n        //             });\n        //             console.log(error);\n        //         })\n        // }\n    }\n\n    render() {\n        return (\n            <div className=\"metadata\">\n                {\n                    this.state.loading ? (\n                        <div className=\"metadata-loading\">\n                            <ReactLoading type={\"bars\"} width={50} color={\"#43425D\"}/>\n                        </div>\n                    ) : (\n                        !this.state.error && this.state.metadata ? (\n                            <div className=\"metadata-data\">\n                                <div className=\"metadata-favicon\">\n                                    <img src={`${this.state.metadata.image}`} alt=\"\"/>\n                                </div>\n                                <div className=\"metadata-info\">\n                                    <div className=\"metadata-title\">\n                                        <a href={this.props.url} target=\"_blank\" rel=\"noopener noreferrer\">\n                                            {this.state.metadata.title}\n                                        </a>\n                                    </div>\n                                    <div className=\"metadata-desc\">\n                                        {this.state.metadata.description}\n                                    </div>\n                                </div>\n                            </div>\n                        ) : null)\n                }\n            </div>\n        );\n    }\n}","\nArray.prototype.lastFind = function (predicate) {\n    for (let i = this.length - 1; i >= 0; --i) {\n        const x = this[i];\n        if (predicate(x)) {\n            return x;\n        }\n    }\n};\n\nexport function deepCompare() {\n    let i, l, leftChain, rightChain;\n\n    function compare2Objects(x, y) {\n        let p;\n\n        // remember that NaN === NaN returns false\n        // and isNaN(undefined) returns true\n        if (isNaN(x) && isNaN(y) && typeof x === 'number' && typeof y === 'number') {\n            return true;\n        }\n\n        // Compare primitives and functions.\n        // Check if both arguments link to the same object.\n        // Especially useful on the step where we compare prototypes\n        if (x === y) {\n            return true;\n        }\n\n        // Works in case when functions are created in constructor.\n        // Comparing dates is a common scenario. Another built-ins?\n        // We can even handle functions passed across iframes\n        if ((typeof x === 'function' && typeof y === 'function') ||\n            (x instanceof Date && y instanceof Date) ||\n            (x instanceof RegExp && y instanceof RegExp) ||\n            (x instanceof String && y instanceof String) ||\n            (x instanceof Number && y instanceof Number)) {\n            return x.toString() === y.toString();\n        }\n\n        // At last checking prototypes as good as we can\n        if (!(x instanceof Object && y instanceof Object)) {\n            return false;\n        }\n\n        if (x.isPrototypeOf(y) || y.isPrototypeOf(x)) {\n            return false;\n        }\n\n        if (x.constructor !== y.constructor) {\n            return false;\n        }\n\n        if (x.prototype !== y.prototype) {\n            return false;\n        }\n\n        // Check for infinitive linking loops\n        if (leftChain.indexOf(x) > -1 || rightChain.indexOf(y) > -1) {\n            return false;\n        }\n\n        // Quick checking of one object being a subset of another.\n        // todo: cache the structure of arguments[0] for performance\n        for (p in y) {\n            if (y.hasOwnProperty(p) !== x.hasOwnProperty(p)) {\n                return false;\n            } else if (typeof y[p] !== typeof x[p]) {\n                return false;\n            }\n        }\n\n        for (p in x) {\n            if (y.hasOwnProperty(p) !== x.hasOwnProperty(p)) {\n                return false;\n            } else if (typeof y[p] !== typeof x[p]) {\n                return false;\n            }\n\n            switch (typeof (x[p])) {\n                case 'object':\n                case 'function':\n\n                    leftChain.push(x);\n                    rightChain.push(y);\n\n                    if (!compare2Objects(x[p], y[p])) {\n                        return false;\n                    }\n\n                    leftChain.pop();\n                    rightChain.pop();\n                    break;\n\n                default:\n                    if (x[p] !== y[p]) {\n                        return false;\n                    }\n                    break;\n            }\n        }\n\n        return true;\n    }\n\n    if (arguments.length < 1) {\n        return true; //Die silently? Don't know how to handle such case, please help...\n        // throw \"Need two or more arguments to compare\";\n    }\n\n    for (i = 1, l = arguments.length; i < l; i++) {\n\n        leftChain = []; //Todo: this can be cached\n        rightChain = [];\n\n        if (!compare2Objects(arguments[0], arguments[i])) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\n\nconst SECOND_MILLIS = 1000;\nconst MINUTE_MILLIS = 60 * SECOND_MILLIS;\nconst HOUR_MILLIS = 60 * MINUTE_MILLIS;\nconst DAY_MILLIS = 24 * HOUR_MILLIS;\n\nexport function getTimeAgo(time) {\n    let now = Date.now();\n    if (time > now || time <= 0) {\n        return null;\n    }\n\n\n    let diff = now - time;\n    if (diff < 2500) {\n        return \"online\";\n    } else if (diff < MINUTE_MILLIS) {\n        return \"last seen recently\";\n    } else if (diff < 2 * MINUTE_MILLIS) {\n        return \"a minute ago\";\n    } else if (diff < 50 * MINUTE_MILLIS) {\n        return `${Math.floor(diff / MINUTE_MILLIS)} minutes ago`;\n    } else if (diff < 90 * MINUTE_MILLIS) {\n        return \"an hour ago\";\n    } else if (diff < 24 * HOUR_MILLIS) {\n        return `${Math.floor(diff / HOUR_MILLIS)} hours ago`;\n    } else if (diff < 48 * HOUR_MILLIS) {\n        return \"yesterday\";\n    } else if (diff < 10 * DAY_MILLIS) {\n        return `${Math.floor(diff / DAY_MILLIS)} days ago`;\n    } else {\n        let currentTime = new Date(time);\n        return `${currentTime.getDate()}/${currentTime.getMonth() + 1}/${currentTime.getFullYear()}`;\n    }\n}\n\nexport function getFormattedDate(time) {\n    let now = Date.now();\n    if (time > now || time <= 0) {\n        return null;\n    }\n\n\n    let diff = now - time;\n    if (diff < 24 * HOUR_MILLIS) {\n        return `Today`;\n    } else if (diff < 48 * HOUR_MILLIS) {\n        return \"Yesterday\";\n    } else {\n        let currentTime = new Date(time);\n        return `${currentTime.getDate()}/${currentTime.getMonth() + 1}/${currentTime.getFullYear()}`;\n    }\n}\n\nexport function getFormattedTime(time) {\n    let currentTime = new Date(time);\n\n    return `${currentTime.getHours()}:${currentTime.getMinutes()}`;\n}\n\nexport const linkRegex = /(?:(?:https?|ftp):\\/\\/|\\b(?:[a-z\\d]+\\.))(?:(?:[^\\s()<>]+|\\((?:[^\\s()<>]+|(?:\\([^\\s()<>]+\\)))?\\))+(?:\\((?:[^\\s()<>]+|(?:\\(?:[^\\s()<>]+\\)))?\\)|[^\\s`!()[\\]{};:'\".,<>?«»“”‘’]))?/;\nexport const onlySpacesRegex = /^(\\s+)$/;\nexport function linksSplitter(text) {\n    return text.split(/(\\s+)/).map((word) => {\n        if (word.match(linkRegex)) {\n            return {\n                word,\n                type: \"link\",\n            }\n        }\n        return {\n            word,\n            type: \"text\",\n        };\n    });\n}","import React from \"react\";\nimport Notify from '../Notify';\nimport * as PropTypes from 'prop-types';\nimport {Picker as EmojiPicker} from 'emoji-mart';\nimport uuid from 'uuid';\nimport URLMetadata from './URLMetadata';\nimport * as utils from '../../js/utils';\n\nimport './Assets/css/chat.css';\nimport '../../Assets/fontawesome/css/all.css';\nimport 'emoji-mart/css/emoji-mart.css';\n\n\nclass ChatSearchBar extends React.Component {\n    static propTypes = {\n        onSearch: PropTypes.func,\n    };\n\n    onSearchInput = ({target: {value: text}}) => {\n        this.props.onSearch(text);\n    };\n\n    render() {\n        return (\n            <div className=\"chat-search-bar\">\n                <div className=\"chat-search-wrapper\">\n                    <div className=\"chat-search-icon\">\n                        <i className=\"fa fa-search\"> </i>\n                    </div>\n                    <div className=\"chat-search-input\">\n                        <input type=\"text\" onChange={this.onSearchInput}/>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nclass ChatListItem extends React.Component {\n    static propTypes = {\n        avatar: PropTypes.string,\n        name: PropTypes.string,\n        desc: PropTypes.oneOfType([\n            PropTypes.string,\n            PropTypes.object,\n        ]),\n        time: PropTypes.number,\n        unreadMsgCount: PropTypes.number,\n        currentChatId: PropTypes.number,\n        updateCurrentChat: PropTypes.func,\n    };\n\n    componentDidMount() {\n        this.interval = setInterval(() => {\n            this.forceUpdate();\n        }, 2500);\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.interval);\n    }\n\n    getStatusWithTimestamp = () => {\n        const {time} = this.props;\n\n        return utils.getTimeAgo(time);\n    };\n\n    render() {\n        let isThisCurrentChat = \"\";\n        if (this.props.currentChatId === this.props.id) {\n            isThisCurrentChat = \"current\";\n        }\n\n        return (\n            <div\n                className={`chat-list-item ${isThisCurrentChat}`}\n                onClick={this.props.updateCurrentChat}\n            >\n                <div className=\"chat-list-item-image\">\n                    <img src={this.props.avatar} alt=\"\"/>\n                    {\n                        this.getStatusWithTimestamp() === \"online\" &&\n                        <Notify size={\"8\"} position={\"bottom-right\"} color=\"lawngreen\"/>\n                    }\n                </div>\n                <div className=\"chat-list-item-info\">\n                    <div className=\"chat-list-item-name\">\n                        {this.props.name}\n                    </div>\n                    <div className=\"chat-list-item-desc\">\n                        {this.props.desc}\n                    </div>\n                </div>\n                <div className=\"chat-list-item-details\">\n                    <div className=\"chat-list-item-time\">\n                        {this.getStatusWithTimestamp()}\n                    </div>\n                    {\n                        this.props.unreadMsgCount > 0 &&\n                        <div className=\"chat-list-item-msg_count\">\n                            {this.props.unreadMsgCount}\n                        </div>\n                    }\n                </div>\n            </div>\n        );\n    }\n}\n\nclass ChatListItems extends React.Component {\n    static propTypes = {\n        list: PropTypes.array,\n        currentChatId: PropTypes.number,\n        updateCurrentChat: PropTypes.func,\n    };\n\n    render() {\n        return (\n            <div className=\"chat-list-items\">\n                {this.props.list.map(listItem =>\n                    <ChatListItem\n                        key={listItem.id}\n                        id={listItem.id}\n                        avatar={listItem.avatar}\n                        desc={listItem.desc}\n                        name={listItem.name}\n                        time={listItem.lastSeen}\n                        unreadMsgCount={listItem.messageCount}\n                        currentChatId={this.props.currentChatId}\n                        updateCurrentChat={() => {\n                            this.props.updateCurrentChat(listItem.id);\n                        }}\n                    />\n                )}\n            </div>\n        );\n    }\n}\n\nclass MessageDeliveryStatusIcons extends React.Component {\n    static propTypes = {\n        status: PropTypes.number,\n    };\n\n    render() {\n        let messageDeliveryStatus = null;\n        if (this.props.status === 0) {\n            messageDeliveryStatus = <i className=\"far fa-clock\"> </i>;\n        } else if (this.props.status === 1) {\n            messageDeliveryStatus = <i className=\"fas fa-check\"> </i>\n        } else if (this.props.status === 2) {\n            messageDeliveryStatus = <i className=\"fas fa-check-double\"> </i>\n        }\n        return messageDeliveryStatus;\n    }\n}\n\nclass ChatList extends React.Component {\n    static propTypes = {\n        chat: PropTypes.object,\n        updateCurrentChat: PropTypes.func,\n    };\n\n    state = {\n        search: \"\",\n    };\n\n    onSearch = (search) => {\n        this.setState({search});\n    };\n\n    getFilteredList = () => {\n        return this.props.chat.list\n            .filter(listItem => listItem.name.includes(this.state.search))\n            .map(listItem => {\n                return {\n                    avatar: listItem.avatar,\n                    name: listItem.name,\n                    id: listItem.id,\n                    messageCount: listItem.unread,\n                    lastSeen: listItem.lastSeen,\n                    desc: (() => {\n                        let {messages} = listItem;\n                        let message = messages[messages.length - 1];\n\n                        let messageDeliveryStatus = (\n                            message.by === 0 &&\n                            <div className=\"chat-message_delivery_status\">\n                                <MessageDeliveryStatusIcons status={message.read}/>\n                            </div>\n                        );\n\n                        if (message.type === \"text\") {\n                            return (\n                                <span>\n                                    {messageDeliveryStatus}\n                                    {message.data}\n                                </span>\n                            );\n                        } else if (message.type === \"image\") {\n                            return (\n                                <span>\n                                    {messageDeliveryStatus}\n                                    <i className=\"far fa-file-image\"> </i> image\n                                </span>\n                            );\n                        } else if (message.type === \"video\") {\n                            return (\n                                <span>\n                                    {messageDeliveryStatus}\n                                    <i className=\"far fa-file-video\"> </i> video\n                                </span>\n                            );\n                        }\n                    })(),\n                };\n            });\n    };\n\n    render() {\n        return (\n            <div className=\"chat-list\">\n                <ChatSearchBar\n                    onSearch={this.onSearch}\n                />\n                <ChatListItems\n                    list={this.getFilteredList()}\n                    currentChatId={this.props.chat.currentChatId}\n                    updateCurrentChat={this.props.updateCurrentChat}\n                />\n            </div>\n        )\n    }\n}\n\nclass ChatHeader extends React.Component {\n    static propTypes = {\n        avatar: PropTypes.string,\n        name: PropTypes.string,\n        time: PropTypes.number,\n        closeCurrentChat: PropTypes.func,\n    };\n\n    componentDidMount() {\n        this.interval = setInterval(() => {\n            this.forceUpdate();\n        }, 2500);\n    }\n\n    getStatusWithTimestamp = () => {\n        const {time} = this.props;\n\n        return utils.getTimeAgo(time);\n    };\n\n    componentWillUnmount() {\n        clearInterval(this.interval);\n    }\n\n    render() {\n        return (\n            <div className=\"chat-header\">\n                <div className=\"chat-list-item-image\">\n                    <img src={this.props.avatar} alt=\"\"/>\n                    {\n                        this.getStatusWithTimestamp() === \"online\" ?\n                            <Notify size={\"8\"} position={\"bottom-right\"} color=\"lawngreen\"/> : null\n                    }\n                </div>\n                <div className=\"chat-list-item-info\">\n                    <div className=\"chat-list-item-name\">\n                        {this.props.name}\n                    </div>\n                    <div className=\"chat-list-item-desc\">\n                        {this.getStatusWithTimestamp()}\n                    </div>\n                </div>\n                <div className=\"chat-close\" onClick={this.props.closeCurrentChat}>\n                    <i className=\"fas fa-times\"> </i>\n                </div>\n            </div>\n        );\n    }\n}\n\nclass ChatLine extends React.Component {\n    static propTypes = {\n        message: PropTypes.object,\n        chatType: PropTypes.string,\n    };\n\n    static contextTypes = {\n        showFullScreen: PropTypes.func,\n    };\n\n    static defaultProps = {\n        by: 0,\n    };\n\n    showFullScreen = () => {\n        const {message} = this.props;\n\n        switch (message.type) {\n            case 'image': // noinspection JSDeprecatedSymbols\n                this.context.showFullScreen(message.data.image, 'image');\n                break;\n            case 'video': // noinspection JSDeprecatedSymbols\n                this.context.showFullScreen(message.data.video, 'video');\n                break;\n            default:\n        }\n    };\n\n    getTime = () => {\n        const {message: {time}} = this.props;\n        return utils.getFormattedTime(time);\n    };\n\n    getConvertedMessage = (text) => {\n        let textAndLinks = utils.linksSplitter(text);\n        let link = null;\n\n        return [textAndLinks.map(item => {\n            if (item.type === \"link\") {\n                link = item.word;\n                return <a href={item.word}>{item.word}</a>;\n            }\n            return item.word;\n        }), link];\n    };\n\n    render() {\n        const {message} = this.props;\n\n        let data = null;\n\n        switch (message.type) {\n            case \"text\":\n                let linkAndMessage = this.getConvertedMessage(message.data);\n                data = (\n                    <div>\n                        {\n                            !!linkAndMessage[1] &&\n                            <div className=\"chat-url_metadata\" onClick={this.showFullScreen}>\n                                <URLMetadata url={linkAndMessage[1]}/>\n                            </div>\n                        }\n                        {linkAndMessage[0]}\n                    </div>\n                );\n                break;\n            case \"image\":\n                data = (\n                    <div>\n                        <div className=\"chat-line-image\" onClick={this.showFullScreen}>\n                            <img src={message.data.image} alt=\"\"/>\n                        </div>\n                        {this.getConvertedMessage(message.data.caption)}\n                    </div>\n                );\n                break;\n            case \"video\":\n                data = (\n                    <div>\n                        <div className=\"chat-line-video\" onClick={this.showFullScreen}>\n                            <img src={message.data.thumbnail} alt=\"\"/>\n                            <div className=\"chat-video-play-icon\">\n                                <i className=\"fa fa-play\"> </i>\n                            </div>\n                        </div>\n                        {this.getConvertedMessage(message.data.caption)}\n                    </div>\n                );\n                break;\n            default:\n        }\n\n        let message_by = message.by === 0 ? \"me\" : \"you\";\n\n        return (\n            <div className=\"chat-line\">\n                <div className={`chat-line-wrapper ${message_by}`}>\n                    {\n                        this.props.chatType === \"group\" && message.by !== 0 &&\n                        <div className={`chat-message_by ${message_by}`}>\n                            {message.by}\n                        </div>\n                    }\n                    {data}\n                    <div className={`chat-message-time ${message_by}`}>\n                        {this.getTime()}\n                        {\n                            message.by === 0 &&\n                            <div className=\"chat-message_delivery_status\">\n                                <MessageDeliveryStatusIcons status={message.read}/>\n                            </div>\n                        }\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nclass DateMarker extends React.Component {\n    static propTypes = {\n        date: PropTypes.number,\n    };\n\n    render() {\n        return (\n            <div className=\"chat-line\">\n                <div className=\"chat-date_marker\">\n                    {utils.getFormattedDate(this.props.date)}\n                </div>\n            </div>\n        );\n    }\n}\n\nclass ChatContent extends React.Component {\n    static propTypes = {\n        messages: PropTypes.array,\n        removeUnreadPointer: PropTypes.func,\n        currentChatId: PropTypes.number,\n        loadPreviousChat: PropTypes.func,\n        hasPreviousChat: PropTypes.bool,\n        chatType: PropTypes.string,\n    };\n\n    componentDidMount() {\n        setTimeout(() => {\n            if (this.unreadPointer) {\n                this.unreadPointer.scrollIntoView({\n                    behavior: \"smooth\"\n                });\n            } else {\n                this.endPointer.scrollIntoView({\n                    behavior: \"smooth\"\n                });\n            }\n        }, 1000 / 60);\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (!utils.deepCompare(prevProps, this.props)) {\n            if (!this.previousChatUpdate) {\n                setTimeout(() => {\n                    if (this.unreadPointer) {\n                        this.unreadPointer.scrollIntoView({\n                            behavior: \"smooth\"\n                        });\n                    } else {\n                        this.endPointer.scrollIntoView({\n                            behavior: \"smooth\"\n                        });\n                    }\n                }, 1000 / 60);\n            }\n            this.previousChatUpdate = false;\n        }\n    }\n\n    UNSAFE_componentWillUpdate(nextProps, nextState, nextContext) {\n        if (this.unreadPointer) {\n            this.props.removeUnreadPointer(this.props.currentChatId);\n        }\n    }\n\n    componentWillUnmount() {\n        if (this.unreadPointer) {\n            this.props.removeUnreadPointer(this.props.currentChatId);\n        }\n    }\n\n    loadPreviousChat = () => {\n        this.previousChatUpdate = true;\n        this.props.loadPreviousChat(this.props.currentChatId);\n    };\n\n    createMessagesWithDateObjects = () => {\n        let {messages} = this.props;\n\n        return messages.reduce((accumulator, currentMessage) => {\n            let {messages, currentDate} = accumulator;\n            let newDate = new Date(currentMessage.time);\n\n            if (!currentMessage.time\n                || (currentDate.getFullYear() === newDate.getFullYear()\n                    && currentDate.getMonth() === newDate.getMonth()\n                    && currentDate.getDate() === newDate.getDate())) {\n            } else {\n                messages.push({\n                    dateMarker: currentMessage.time,\n                });\n                accumulator.currentDate = newDate;\n            }\n            accumulator.messages.push(currentMessage);\n\n            return accumulator;\n        }, {\n            messages: [],\n            currentDate: new Date(0),\n        }).messages;\n    };\n\n    render() {\n        const messages = this.createMessagesWithDateObjects();\n\n        return (\n            <div className=\"chat-content\" onScroll={(event) => {\n                console.log(event.target.scrollTop);\n            }}>\n                {\n                    this.props.hasPreviousChat &&\n                    <div className=\"chat-line\">\n                        <div className=\"chat-load_previous\" onClick={this.loadPreviousChat}>\n                            Load Previous\n                        </div>\n                    </div>\n                }\n                {\n                    messages.map(message => {\n                        if (message.unreadPointer) {\n                            return (\n                                <div\n                                    key=\"unreadPointer\"\n                                    className=\"chat-line\"\n                                >\n                                    <div\n                                        className=\"chat-unread_messages\"\n                                        ref={(div) => {\n                                            this.unreadPointer = div;\n                                        }}\n                                    >\n                                        Unread Messages\n                                    </div>\n                                </div>\n                            )\n                        }\n                        if (message.dateMarker) {\n                            return (\n                                <DateMarker\n                                    key={`date-${message.dateMarker}`}\n                                    date={message.dateMarker}\n                                />\n                            )\n                        }\n                        return (\n                            <ChatLine\n                                message={message}\n                                key={message.id}\n                                chatType={this.props.chatType}\n                            />\n                        );\n                    })\n                }\n                <div\n                    ref={(div) => {\n                        this.endPointer = div;\n                    }}\n                >\n                </div>\n            </div>\n        );\n    }\n}\n\nclass EmojiPanelButton extends React.Component {\n    static propTypes = {\n        onEmojiSelect: PropTypes.func,\n    };\n\n    state = {\n        showEmojiPanel: false,\n    };\n\n    toggleEmojiPanel = () => {\n        this.setState({\n            showEmojiPanel: !this.state.showEmojiPanel,\n        });\n    };\n\n    render() {\n        const {onEmojiSelect, ...buttonProps} = this.props;\n        return (\n            <span style={{position: \"relative\"}}>\n            <button className=\"emoji\" onClick={this.toggleEmojiPanel} {...buttonProps}>\n                {this.props.children}\n            </button>\n                {\n                    this.state.showEmojiPanel &&\n                    <EmojiPicker\n                        set='google'\n                        style={{\n                            position: \"absolute\",\n                            bottom: \"30px\",\n                            right: \"0\",\n                        }}\n                        onSelect={onEmojiSelect}\n                    />\n                }\n            </span>\n        );\n    }\n}\n\nclass MessageInputWithURLMetadata extends React.Component {\n    static propTypes = {\n        reference: PropTypes.func,\n        message: PropTypes.string,\n        onChange: PropTypes.func,\n        link: PropTypes.string,\n    };\n\n    render() {\n        return (\n            <div className=\"chat-message-input\">\n                <input\n                    type=\"text\"\n                    onChange={this.props.onChange}\n                    value={this.props.message}\n                    ref={(inp) => this.props.reference(inp)}\n                    className=\"message_input\"\n                />\n                {\n                    !!this.props.link &&\n                    <div className=\"chat-input-link-metadata\">\n                        <URLMetadata key={this.props.link} url={this.props.link}/>\n                    </div>\n                }\n            </div>\n        );\n    }\n}\n\nclass ChatInput extends React.Component {\n    static propTypes = {\n        updateMessage: PropTypes.func,\n    };\n\n    state = {\n        message: \"\",\n        type: \"\",\n        link: null,\n    };\n\n    getLink = text => {\n        let link = utils.linksSplitter(text).lastFind(item => item.type === \"link\");\n        return link ? link.word : null;\n    };\n\n    onMessageInput = ({target: {value: message}}) => {\n        this.setState({\n            message,\n            type: \"text\",\n            link: this.getLink(message),\n        });\n    };\n\n    onMessageSubmit = (event) => {\n        event.preventDefault();\n        if (this.state.message.match(utils.onlySpacesRegex)) {\n            return;\n        }\n        const {updateMessage} = this.props;\n\n        let message = {\n            data: this.state.message,\n            type: this.state.type,\n            id: uuid.v4(),\n            by: 0,\n            time: Date.now(),\n            read: 0,\n        };\n\n        this.setState({\n            message: \"\",\n            type: \"\",\n            link: null,\n        });\n\n        updateMessage(message);\n    };\n\n    emojiUpdate = (emoji) => {\n        this.setState({\n            message: this.state.message + emoji.native,\n            type: \"text\",\n        });\n        this.messageInput.focus();\n    };\n\n    render() {\n        return (\n            <form onSubmit={this.onMessageSubmit}>\n                <div className=\"chat-input\">\n                    <MessageInputWithURLMetadata\n                        message={this.state.message}\n                        reference={(inp) => this.messageInput = inp}\n                        onChange={this.onMessageInput}\n                        link={this.state.link}\n                    />\n                    <button type=\"submit\" className=\"button\"><i className=\"far fa-paper-plane\"> </i></button>\n                    <button type=\"button\" className=\"button\"><i className=\"fas fa-paperclip\"> </i></button>\n                    <EmojiPanelButton type=\"button\" className=\"button\" onEmojiSelect={this.emojiUpdate}>\n                        <i className=\"far fa-smile\"> </i>\n                    </EmojiPanelButton>\n                </div>\n            </form>\n        );\n    }\n}\n\nclass ChatBody extends React.Component {\n    static propTypes = {\n        chat: PropTypes.object,\n        updateMessage: PropTypes.func,\n        closeCurrentChat: PropTypes.func,\n        removeUnreadPointer: PropTypes.func,\n        loadPreviousChat: PropTypes.func,\n    };\n\n    updateMessage = (message) => {\n        let {currentChatId} = this.props.chat;\n\n        this.props.updateMessage(currentChatId, message);\n    };\n\n\n    render() {\n        const {currentChatId} = this.props.chat;\n        const currentChat = this.props.chat.list.find(listItem => listItem.id === currentChatId);\n\n        return (\n            <div className=\"chat-body\">\n                {\n                    !!currentChatId &&\n                    <span>\n                        <ChatHeader\n                            name={currentChat.name}\n                            time={currentChat.lastSeen}\n                            avatar={currentChat.avatar}\n                            closeCurrentChat={this.props.closeCurrentChat}\n                        />\n                        <ChatContent\n                            hasPreviousChat={currentChat.hasPreviousChat}\n                            currentChatId={currentChatId}\n                            messages={currentChat.messages}\n                            removeUnreadPointer={this.props.removeUnreadPointer}\n                            loadPreviousChat={this.props.loadPreviousChat}\n                            chatType={currentChat.chatType}\n                        />\n                        <ChatInput\n                            updateMessage={this.updateMessage}\n                        />\n                    </span>\n                }\n            </div>\n        )\n    }\n}\n\nexport default class Chat extends React.Component {\n    static propTypes = {\n        chat: PropTypes.object.isRequired,\n        updateCurrentChat: PropTypes.func,\n        updateMessage: PropTypes.func,\n        closeCurrentChat: PropTypes.func,\n        removeUnreadPointer: PropTypes.func,\n        loadPreviousChat: PropTypes.func,\n    };\n\n    render() {\n        return (\n            <div className=\"chat\">\n                <ChatList\n                    chat={this.props.chat}\n                    updateCurrentChat={this.props.updateCurrentChat}\n                />\n                <ChatBody\n                    chat={this.props.chat}\n                    updateMessage={this.props.updateMessage}\n                    closeCurrentChat={this.props.closeCurrentChat}\n                    removeUnreadPointer={this.props.removeUnreadPointer}\n                    loadPreviousChat={this.props.loadPreviousChat}\n                />\n            </div>\n        );\n    }\n}","import React from \"react\";\nimport ReactPlayer from 'react-player';\nimport PropTypes from 'prop-types';\n\nimport \"./Assets/css/full-screen.css\";\n\nexport default class FullScreenView extends React.Component {\n    state = {\n        content: null,\n        type: null,\n        isFullScreen: false,\n    };\n\n    static childContextTypes = {\n        showFullScreen: PropTypes.func,\n    };\n\n    showFullScreen = (content, type) => {\n        this.setState({\n            content,\n            type,\n            isFullScreen: true,\n        });\n    };\n\n    hideFullScreen = () => {\n        this.setState({\n            content: null,\n            type: null,\n            isFullScreen: false,\n        });\n    };\n\n    getChildContext() {\n        return {\n            showFullScreen: this.showFullScreen,\n        }\n    }\n\n    render() {\n        const {children} = this.props;\n        let view = null;\n        if (this.state.isFullScreen) {\n            if (this.state.type === \"image\") {\n                view = (\n                    <div className=\"image-view\">\n                        <img src={this.state.content} alt=\"view\"/>\n                    </div>\n                );\n            } else if (this.state.type === \"video\") {\n                view = (\n                    <div className=\"image-view\">\n                        <ReactPlayer\n                            url={this.state.content}\n                            controls\n                            playing\n                            width='100%'\n                            height='100%'\n                        />\n                    </div>\n                );\n            }\n        }\n\n        return (\n            <div>\n                {children}\n                {\n                    this.state.isFullScreen ?\n                        <div className=\"full-screen\">\n                            <div\n                                className=\"exit\"\n                                onClick={this.hideFullScreen}\n                            >\n                                &times;\n                            </div>\n                            <div className=\"content centered\">\n                                {view}\n                            </div>\n                        </div> : null\n                }\n            </div>\n        );\n    }\n}","import React from 'react';\nimport Chat from './Components/Chat/Chat';\nimport URLMetadata from './Components/Chat/URLMetadata';\nimport uuid from 'uuid';\n\nimport './App.css';\nimport FullScreenView from \"./Components/FullScreenView/FullScreenView\";\n\nclass App extends React.Component {\n    state = {\n        chat: {\n            list: [\n                {\n                    id: 1,\n                    name: \"Vishal\",\n                    avatar: require(\"./Assets/images/Avatar.png\"),\n                    messages: [\n                        {\n                            id: 1,\n                            by: \"you\",\n                            data: \"222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222\",\n                            time: 1, type: \"text\",\n                        },\n                        {\n                            id: 2,\n                            by: 0,\n                            data: \"2222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222\",\n                            time: 2, type: \"text\",\n                            read: 0 // wait\n                        },\n                        {\n                            id: 3,\n                            by: 0,\n                            data: \"Hello\",\n                            time: 3,\n                            type: \"text\",\n                            read: 1 // delivered to server\n                        },\n                        {\n                            id: 4,\n                            by: \"you\",\n                            data: \"Hi\",\n                            time: 4,\n                            type: \"text\"\n                        },\n                        {\n                            unreadPointer: true,\n                        },\n                        {\n                            id: 5,\n                            by: 0,\n                            data: {\n                                image: require(\"./Assets/images/trial.png\"),\n                                caption: \"Another Caption for image\"\n                            },\n                            time: 5,\n                            type: \"image\",\n                            read: 2, // read\n                        },\n                        {\n                            id: 7,\n                            by: \"you\",\n                            data: {\n                                thumbnail: require(\"./Assets/images/trial.png\"),\n                                video: require(\"./Assets/videos/trial.mp4\"),\n                                caption: \"Avengers End Game\",\n                            },\n                            type: \"video\",\n                            time: 6,\n                        },\n                        {\n                            id: 6,\n                            by: 0,\n                            data: {\n                                image: require(\"./Assets/images/trial.png\"),\n                                caption: \"A best Avatar Caption\",\n                            },\n                            type: \"image\",\n                            time: 7,\n                        },\n                    ],\n                    lastSeen: Date.now(),\n                    unread: 3,\n                    hasPreviousChat: true,\n                    chatType: \"group\"\n                }, {\n                    id: 2,\n                    name: \"Vishnu\",\n                    avatar: require(\"./Assets/images/Avatar.png\"),\n                    messages: [\n                        {id: 1, by: 0, data: \"Hello\", time: 1, type: \"text\"},\n                        {id: 2, by: \"you\", data: \"Hi\", time: 2, type: \"text\"},\n                        {id: 3, by: 0, data: \"Hello\", time: 3, type: \"text\"},\n                        {id: 4, by: \"you\", data: \"Hi\", time: 4, type: \"text\"},\n                    ],\n                    lastSeen: 2,\n                    unread: 0,\n                    hasPreviousChat: false,\n                    chatType: \"individual\",\n                },\n            ],\n            currentChatId: null,\n        },\n    };\n\n    updateCurrentChat = (id) => {\n        this.setState((prevState) => {\n            return {\n                chat: {\n                    ...prevState.chat,\n                    currentChatId: id,\n                    list: prevState.chat.list.map(listItem => {\n                        if (listItem.id === id) {\n                            return {\n                                ...listItem,\n                                unread: 0,\n                            };\n                        }\n                        return listItem;\n                    }),\n                }\n            }\n        });\n    };\n\n    removeUnreadPointer = (id) => {\n        this.setState((prevState) => {\n            return {\n                chat: {\n                    ...prevState.chat,\n                    list: prevState.chat.list.map(listItem => {\n                        if (listItem.id === id) {\n                            return {\n                                ...listItem,\n                                messages: listItem.messages.filter(message => message.unreadPointer !== true),\n                            };\n                        }\n                        return listItem;\n                    }),\n                }\n            }\n        });\n    };\n\n    closeCurrentChat = () => {\n        this.setState({\n            chat: {\n                ...this.state.chat,\n                currentChatId: null,\n            }\n        })\n    };\n\n    loadPreviousChat = (id) => {\n        this.setState((prevState) => {\n            return {\n                chat: {\n                    ...prevState.chat,\n                    list: prevState.chat.list.map(listItem => {\n                        if (listItem.id === id) {\n                            return {\n                                ...listItem,\n                                messages: [\n                                    {id: uuid.v4(), by: 0, data: \"Previous Message\", time: 1, type: \"text\"},\n                                    {id: uuid.v4(), by: \"Arun\", data: \"Previous Message\", time: 1, type: \"text\"},\n                                    ...listItem.messages,\n                                ],\n                            };\n                        }\n                        return listItem;\n                    }),\n                }\n            }\n        });\n    };\n\n    updateMessage = (id, message) => {\n        const {id: message_id} = message;\n\n        this.setState((prevState) => {\n            return {\n                chat: {\n                    ...prevState.chat,\n                    list: prevState.chat.list.map(listItem => {\n                        if (listItem.id === id) {\n                            return {\n                                ...listItem,\n                                messages: [\n                                    ...listItem.messages,\n                                    message,\n                                ],\n                            };\n                        }\n                        return listItem;\n                    }),\n                }\n            };\n        });\n        setTimeout(() => {\n            this.setState((prevState) => {\n                return {\n                    chat: {\n                        ...prevState.chat,\n                        list: prevState.chat.list.map(listItem => {\n                            if (listItem.id === id) {\n                                return {\n                                    ...listItem,\n                                    messages: listItem.messages.map(message => {\n                                        if (message_id === message.id) {\n                                            return {\n                                                ...message,\n                                                read: 1,\n                                            }\n                                        }\n                                        return message;\n                                    }),\n                                };\n                            }\n                            return listItem;\n                        }),\n                    }\n                };\n            });\n        }, 2500)\n    };\n\n    render() {\n        return (\n            <div className=\"App\">\n                <FullScreenView>\n                    <Chat\n                        chat={this.state.chat}\n                        updateCurrentChat={this.updateCurrentChat}\n                        closeCurrentChat={this.closeCurrentChat}\n                        updateMessage={this.updateMessage}\n                        removeUnreadPointer={this.removeUnreadPointer}\n                        loadPreviousChat={this.loadPreviousChat}\n                    />\n                </FullScreenView>\n                {/*<URLMetadata url=\"https://www.whatsapp.com\"/>*/}\n            </div>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
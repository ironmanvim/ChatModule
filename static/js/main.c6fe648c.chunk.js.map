{"version":3,"sources":["Assets/images/Avatar.png","Assets/images/trial.png","Assets/videos/trial.mp4","Components/Notify.js","Components/Chat/URLMetadata.js","js/utils.js","Components/Loading.js","Components/Chat/index.js","Components/FullScreenView/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Notify","iconStyle","fontSize","this","props","size","color","positionStyle","position","top","left","right","bottom","className","display","style","React","Component","URLMetadata","state","loading","metadata","error","setState","urlMetadata","url","then","console","log","setTimeout","prevProps","prevState","snapshot","type","width","src","image","alt","href","target","rel","title","description","Array","prototype","lastFind","predicate","i","length","x","MINUTE_MILLIS","HOUR_MILLIS","DAY_MILLIS","getTimeAgo","time","now","Date","diff","Math","floor","currentTime","getDate","getMonth","getFullYear","linkRegex","onlySpacesRegex","linksSplitter","text","split","map","word","match","Loading","height","ChatSearchBar","onSearchInput","value","onSearch","onChange","ChatListItem","getStatusWithTimestamp","utils","interval","setInterval","forceUpdate","clearInterval","isThisCurrentChat","currentChatId","id","onClick","updateCurrentChat","avatar","name","desc","unreadMsgCount","ChatListItems","loadingList","list","listItem","key","lastSeen","messageCount","MessageDeliveryStatusIcons","messageDeliveryStatus","status","ChatList","search","getFilteredList","filteredList","chat","sort","AListItem","BListItem","latestMessageTime","filter","toLowerCase","includes","chatType","messages","unread","message","by","read","data","more","searchPerson","noLoadingList","ChatHeader","closeCurrentChat","ChatLine","showFullScreen","context","video","downloadFile","download","file","getTime","getHours","getMinutes","getConvertedMessage","textAndLinks","link","item","linkAndMessage","onLoad","caption","videoUrl","replace","message_by","contextTypes","PropTypes","defaultProps","DateMarker","date","ChatContent","onScroll","scrollTop","scrollHeight","clientHeight","hasPreviousChat","loadPreviousChat","autoScroll","previousChatUpdate","createMessagesWithDateObjects","reduce","accumulator","currentMessage","currentDate","newDate","push","dateMarker","unreadPointer","scrollIntoView","scrollerPosition","chatContent","endPointer","loadingMessages","previousScrollHeight","removeUnreadPointer","newMessageByMe","previousAutoScroll","behavior","cleanNewMessageByMe","updateScrollerPosition","ref","inp","div","EmojiPanelButton","showEmojiPanel","toggleEmojiPanel","onEmojiSelect","buttonProps","children","set","onSelect","MessageInputWithURLMetadata","reference","FileButton","onButtonClick","fileSelector","current","click","fileSelected","event","onFileSelected","selectedFile","files","maxFileSize","notify","createRef","accept","remainingProps","AttachmentsButton","showAttachmentsPanel","toggleAttachmentPanel","imageSelected","onAttachment","videoSelected","documentSelected","cancelAttachment","fileType","chatFileSelected","chatImageSelected","chatVideoSelected","chatDocumentSelected","ChatInput","getLink","onMessageInput","onMessageSubmit","preventDefault","updateMessage","emojiUpdate","emoji","native","messageInput","focus","onSubmit","ChatBody","updateNewMessageByMe","currentChat","newMessage","Chat","scrollerPositions","chatId","newScrollerPositions","markAsReadCurrentChat","find","FullScreenContext","createContext","FullScreenView","useState","content","isFullScreen","fullScreen","setFullScreen","view","controls","playing","Provider","App","require","sendSeen","uuid","v4","self","FileReader","fileReader","onload","result","readAsDataURL","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c6fe648c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Avatar.037763eb.png\";","module.exports = __webpack_public_path__ + \"static/media/trial.b337d9e6.png\";","module.exports = __webpack_public_path__ + \"static/media/trial.24867704.mp4\";","import React from \"react\";\n\nclass Notify extends React.Component {\n    render() {\n        let iconStyle = {\n            fontSize: this.props.size + \"pt\",\n            color: this.props.color,\n        };\n        let positionStyle = {\n            position: \"absolute\",\n        };\n        switch (this.props.position) {\n            case \"top-left\":\n                positionStyle.top = 0;\n                positionStyle.left = 0;\n                break;\n            case \"top-right\":\n                positionStyle.top = 0;\n                positionStyle.right = 0;\n                break;\n            case \"bottom-left\":\n                positionStyle.bottom = 0;\n                positionStyle.left = 0;\n                break;\n            case \"bottom-right\":\n                positionStyle.bottom = 0;\n                positionStyle.right = 0;\n                break;\n            default:\n                break;\n        }\n        return (\n            <span className={this.props.display ? \"notify-icon\" : \"hide\"} style={positionStyle}>\n                <i className=\"fa fa-circle \" style={iconStyle}> </i>\n            </span>\n        );\n    }\n}\n\nexport default Notify;","import React from \"react\";\nimport urlMetadata from 'url-metadata';\nimport ReactLoading from 'react-loading';\nimport * as PropTypes from 'prop-types';\n\nimport './Assets/css/metadata.css';\n\nexport default class URLMetadata extends React.Component {\n    static propTypes = {\n        url: PropTypes.string,\n    };\n\n    state = {\n        loading: false,\n        metadata: null,\n        error: null,\n    };\n\n    componentDidMount() {\n        this.setState({\n            loading: true,\n        });\n        urlMetadata(`https://cors-anywhere.herokuapp.com/${this.props.url}`).then(\n            (metadata) => {\n                this.setState({\n                    loading: false,\n                    metadata,\n                });\n                console.log(metadata);\n            },\n            function (error) {\n                this.setState({\n                    loading: false,\n                    error,\n                });\n                console.log(error);\n            });\n        setTimeout(() => {\n            if(this.state.loading) {\n                this.setState({\n                    loading: false,\n                    error: true,\n                });\n            }\n        }, 10000);\n\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        // if(this.props.url !== prevProps.url) {\n        //     console.log(this.props.url);\n        //     this.setState({\n        //         loading: true,\n        //     });\n        //     urlMetadata(`https://cors-anywhere.herokuapp.com/${this.props.url}`).then(\n        //         (metadata) => {\n        //             this.setState({\n        //                 loading: false,\n        //                 metadata,\n        //             });\n        //             console.log(metadata);\n        //         },\n        //         function (error) {\n        //             this.setState({\n        //                 loading: false,\n        //                 error,\n        //             });\n        //             console.log(error);\n        //         })\n        // }\n    }\n\n    render() {\n        return (\n            <div className=\"metadata\">\n                {\n                    this.state.loading ? (\n                        <div className=\"metadata-loading\">\n                            <ReactLoading type={\"bars\"} width={50} color={\"#43425D\"}/>\n                        </div>\n                    ) : (\n                        !this.state.error && this.state.metadata ? (\n                            <div className=\"metadata-data\">\n                                <div className=\"metadata-favicon\">\n                                    <img src={`${this.state.metadata.image}`} alt=\"\"/>\n                                </div>\n                                <div className=\"metadata-info\">\n                                    <div className=\"metadata-title\">\n                                        <a href={this.props.url} target=\"_blank\" rel=\"noopener noreferrer\">\n                                            {this.state.metadata.title}\n                                        </a>\n                                    </div>\n                                    <div className=\"metadata-desc\">\n                                        {this.state.metadata.description}\n                                    </div>\n                                </div>\n                            </div>\n                        ) : null)\n                }\n            </div>\n        );\n    }\n}","Array.prototype.lastFind = function (predicate) {\n    for (let i = this.length - 1; i >= 0; --i) {\n        const x = this[i];\n        if (predicate(x)) {\n            return x;\n        }\n    }\n};\n\nexport function deepCompare() {\n    let i, l, leftChain, rightChain;\n\n    function compare2Objects(x, y) {\n        let p;\n\n        // remember that NaN === NaN returns false\n        // and isNaN(undefined) returns true\n        if (isNaN(x) && isNaN(y) && typeof x === 'number' && typeof y === 'number') {\n            return true;\n        }\n\n        // Compare primitives and functions.\n        // Check if both arguments link to the same object.\n        // Especially useful on the step where we compare prototypes\n        if (x === y) {\n            return true;\n        }\n\n        // Works in case when functions are created in constructor.\n        // Comparing dates is a common scenario. Another built-ins?\n        // We can even handle functions passed across iframes\n        if ((typeof x === 'function' && typeof y === 'function') ||\n            (x instanceof Date && y instanceof Date) ||\n            (x instanceof RegExp && y instanceof RegExp) ||\n            (x instanceof String && y instanceof String) ||\n            (x instanceof Number && y instanceof Number)) {\n            return x.toString() === y.toString();\n        }\n\n        // At last checking prototypes as good as we can\n        if (!(x instanceof Object && y instanceof Object)) {\n            return false;\n        }\n\n        if (x.isPrototypeOf(y) || y.isPrototypeOf(x)) {\n            return false;\n        }\n\n        if (x.constructor !== y.constructor) {\n            return false;\n        }\n\n        if (x.prototype !== y.prototype) {\n            return false;\n        }\n\n        // Check for infinitive linking loops\n        if (leftChain.indexOf(x) > -1 || rightChain.indexOf(y) > -1) {\n            return false;\n        }\n\n        // Quick checking of one object being a subset of another.\n        // todo: cache the structure of arguments[0] for performance\n        for (p in y) {\n            if (y.hasOwnProperty(p) !== x.hasOwnProperty(p)) {\n                return false;\n            } else if (typeof y[p] !== typeof x[p]) {\n                return false;\n            }\n        }\n\n        for (p in x) {\n            if (y.hasOwnProperty(p) !== x.hasOwnProperty(p)) {\n                return false;\n            } else if (typeof y[p] !== typeof x[p]) {\n                return false;\n            }\n\n            switch (typeof (x[p])) {\n                case 'object':\n                case 'function':\n\n                    leftChain.push(x);\n                    rightChain.push(y);\n\n                    if (!compare2Objects(x[p], y[p])) {\n                        return false;\n                    }\n\n                    leftChain.pop();\n                    rightChain.pop();\n                    break;\n\n                default:\n                    if (x[p] !== y[p]) {\n                        return false;\n                    }\n                    break;\n            }\n        }\n\n        return true;\n    }\n\n    if (arguments.length < 1) {\n        return true; //Die silently? Don't know how to handle such case, please help...\n        // throw \"Need two or more arguments to compare\";\n    }\n\n    for (i = 1, l = arguments.length; i < l; i++) {\n\n        leftChain = []; //Todo: this can be cached\n        rightChain = [];\n\n        if (!compare2Objects(arguments[0], arguments[i])) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\n\nconst SECOND_MILLIS = 1000;\nconst MINUTE_MILLIS = 60 * SECOND_MILLIS;\nconst HOUR_MILLIS = 60 * MINUTE_MILLIS;\nconst DAY_MILLIS = 24 * HOUR_MILLIS;\n\nexport function getTimeAgo(time) {\n    let now = Date.now();\n    if (time > now || time <= 0) {\n        return null;\n    }\n\n\n    let diff = now - time;\n    if (diff < 2500) {\n        return \"online\";\n    } else if (diff < MINUTE_MILLIS) {\n        return \"last seen recently\";\n    } else if (diff < 2 * MINUTE_MILLIS) {\n        return \"a minute ago\";\n    } else if (diff < 50 * MINUTE_MILLIS) {\n        return `${Math.floor(diff / MINUTE_MILLIS)} minutes ago`;\n    } else if (diff < 90 * MINUTE_MILLIS) {\n        return \"an hour ago\";\n    } else if (diff < 24 * HOUR_MILLIS) {\n        return `${Math.floor(diff / HOUR_MILLIS)} hours ago`;\n    } else if (diff < 48 * HOUR_MILLIS) {\n        return \"yesterday\";\n    } else if (diff < 10 * DAY_MILLIS) {\n        return `${Math.floor(diff / DAY_MILLIS)} days ago`;\n    } else {\n        let currentTime = new Date(time);\n        return `${currentTime.getDate()}/${currentTime.getMonth() + 1}/${currentTime.getFullYear()}`;\n    }\n}\n\nexport function getFormattedDate(time) {\n    let now = Date.now();\n    if (time > now || time <= 0) {\n        return null;\n    }\n\n    time = new Date(time);\n    time = new Date(time.getFullYear(), time.getMonth(), time.getDate());\n    time = time.getTime();\n\n    let diff = now - time;\n    if (diff < 24 * HOUR_MILLIS) {\n        return `Today`;\n    } else if (diff < 48 * HOUR_MILLIS) {\n        return \"Yesterday\";\n    } else {\n        let currentTime = new Date(time);\n        return `${currentTime.getDate()}/${currentTime.getMonth() + 1}/${currentTime.getFullYear()}`;\n    }\n}\n\nexport function getFormattedTime(time) {\n    let currentTime = new Date(time);\n\n    return `${currentTime.getHours()}:${currentTime.getMinutes()}`;\n}\n\nexport const linkRegex = /(?:(?:https?|ftp):\\/\\/|\\b(?:[a-z\\d]+\\.))(?:(?:[^\\s()<>]+|\\((?:[^\\s()<>]+|(?:\\([^\\s()<>]+\\)))?\\))+(?:\\((?:[^\\s()<>]+|(?:\\(?:[^\\s()<>]+\\)))?\\)|[^\\s`!()[\\]{};:'\".,<>?«»“”‘’]))?/;\nexport const onlySpacesRegex = /^(\\s*)$/;\nexport function linksSplitter(text) {\n    return text.split(/(\\s+)/).map((word) => {\n        if (word.match(linkRegex)) {\n            return {\n                word,\n                type: \"link\",\n            }\n        }\n        return {\n            word,\n            type: \"text\",\n        };\n    });\n}","import ReactLoading from \"react-loading\";\nimport React from \"react\";\n\nexport default function Loading() {\n    return (\n        <ReactLoading type=\"spin\" color=\"gray\" width={20} height={20}/>\n    );\n}","import React from \"react\";\nimport Notify from '../Notify';\nimport * as PropTypes from 'prop-types';\nimport {Picker as EmojiPicker} from 'emoji-mart';\nimport uuid from 'uuid';\nimport URLMetadata from './URLMetadata';\nimport * as utils from '../../js/utils';\nimport VideoThumbnail from 'react-video-thumbnail';\nimport download from 'downloadjs';\n\nimport './Assets/css/chat.css';\nimport '../../Assets/fontawesome/css/all.css';\nimport 'emoji-mart/css/emoji-mart.css';\nimport Loading from \"../Loading\";\n\n\nclass ChatSearchBar extends React.Component {\n    static propTypes = {\n        onSearch: PropTypes.func,\n    };\n\n    onSearchInput = ({target: {value: text}}) => {\n        this.props.onSearch(text);\n    };\n\n    render() {\n        return (\n            <div className=\"chat-search-bar\">\n                <div className=\"chat-search-wrapper\">\n                    <div className=\"chat-search-icon\">\n                        <i className=\"fa fa-search\"> </i>\n                    </div>\n                    <div className=\"chat-search-input\">\n                        <input type=\"text\" onChange={this.onSearchInput}/>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nclass ChatListItem extends React.Component {\n    static propTypes = {\n        avatar: PropTypes.string,\n        name: PropTypes.string,\n        desc: PropTypes.oneOfType([\n            PropTypes.string,\n            PropTypes.object,\n        ]),\n        time: PropTypes.number,\n        unreadMsgCount: PropTypes.number,\n        currentChatId: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n        updateCurrentChat: PropTypes.func,\n    };\n\n    componentDidMount() {\n        this.interval = setInterval(() => {\n            this.forceUpdate();\n        }, 2500);\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.interval);\n    }\n\n    getStatusWithTimestamp = () => {\n        const {time} = this.props;\n\n        return utils.getTimeAgo(time);\n    };\n\n    render() {\n        let isThisCurrentChat = \"\";\n        if (this.props.currentChatId === this.props.id) {\n            isThisCurrentChat = \"current\";\n        }\n\n        return (\n            <div\n                className={`chat-list-item ${isThisCurrentChat}`}\n                onClick={this.props.updateCurrentChat}\n            >\n                <div className=\"chat-list-item-image\">\n                    <img src={this.props.avatar} alt=\"\"/>\n                    {\n                        this.getStatusWithTimestamp() === \"online\" &&\n                        <Notify size={\"8\"} position={\"bottom-right\"} color=\"lawngreen\"/>\n                    }\n                </div>\n                <div className=\"chat-list-item-info\">\n                    <div className=\"chat-list-item-name\">\n                        {this.props.name}\n                    </div>\n                    <div className=\"chat-list-item-desc\">\n                        {this.props.desc}\n                    </div>\n                </div>\n                <div className=\"chat-list-item-details\">\n                    <div className=\"chat-list-item-time\">\n                        {this.getStatusWithTimestamp()}\n                    </div>\n                    {\n                        isThisCurrentChat !== \"current\" &&\n                        this.props.unreadMsgCount > 0 &&\n                        <div className=\"chat-list-item-msg_count\">\n                            {this.props.unreadMsgCount}\n                        </div>\n                    }\n                    {\n                        isThisCurrentChat !== \"current\" &&\n                        this.props.unreadMsgCount === -1 &&\n                        <div className=\"chat-list-item-msg_count\">\n\n                        </div>\n                    }\n                </div>\n            </div>\n        );\n    }\n}\n\nclass ChatListItems extends React.Component {\n    static propTypes = {\n        list: PropTypes.array,\n        currentChatId: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n        updateCurrentChat: PropTypes.func,\n        loadingList: PropTypes.bool,\n    };\n\n    render() {\n        return (\n            <div className=\"chat-list-items\">\n                {this.props.loadingList && (\n                    <div className=\"chat-list-item loading\">\n                        <Loading/>\n                    </div>\n                )}\n                {this.props.list.map(listItem =>\n                    <ChatListItem\n                        key={listItem.id}\n                        id={listItem.id}\n                        avatar={listItem.avatar}\n                        desc={listItem.desc}\n                        name={listItem.name}\n                        time={listItem.lastSeen}\n                        unreadMsgCount={listItem.messageCount}\n                        currentChatId={this.props.currentChatId}\n                        updateCurrentChat={() => {\n                            this.props.updateCurrentChat(listItem.id);\n                        }}\n                    />\n                )}\n            </div>\n        );\n    }\n}\n\nclass MessageDeliveryStatusIcons extends React.Component {\n    static propTypes = {\n        status: PropTypes.number,\n    };\n\n    render() {\n        let messageDeliveryStatus = null;\n        if (this.props.status === 0) {\n            messageDeliveryStatus = <i className=\"far fa-clock\"> </i>;\n        } else if (this.props.status === 1) {\n            messageDeliveryStatus = <i className=\"fas fa-check\"> </i>\n        } else if (this.props.status === 2) {\n            messageDeliveryStatus = <i className=\"fas fa-check-double\"> </i>\n        } else if (this.props.status === 3) {\n            messageDeliveryStatus = <i style={{color: \"#b0ee9f\"}} className=\"fas fa-check-double\"> </i>\n        }\n        return messageDeliveryStatus;\n    }\n}\n\nclass ChatList extends React.Component {\n    static propTypes = {\n        loadingList: PropTypes.bool,\n        chat: PropTypes.object,\n        updateCurrentChat: PropTypes.func,\n        searchPerson: PropTypes.func,\n        more: PropTypes.bool,\n        noLoadingList: PropTypes.func,\n    };\n\n    state = {\n        search: \"\",\n    };\n\n    onSearch = (search) => {\n        this.setState({search});\n    };\n\n    getFilteredList = () => {\n        const filteredList = this.props.chat.list\n            .sort((AListItem, BListItem) => {\n                return BListItem.latestMessageTime - AListItem.latestMessageTime;\n            })\n            .filter(listItem => {\n                if (this.state.search.length !== 0) {\n                    return listItem.name.toLowerCase().includes(this.state.search.toLowerCase());\n                }\n                return listItem.chatType === \"group\" || listItem.messages.length !== 0;\n            })\n            .map(listItem => {\n                return {\n                    avatar: listItem.avatar,\n                    name: listItem.name,\n                    id: listItem.id,\n                    messageCount: listItem.unread,\n                    lastSeen: listItem.lastSeen,\n                    desc: (() => {\n                        let {messages} = listItem;\n                        if (messages.length > 0) {\n                            let message = messages[messages.length - 1];\n\n                            let messageDeliveryStatus = (\n                                message.by === 0 &&\n                                <div className=\"chat-message_delivery_status\">\n                                    <MessageDeliveryStatusIcons status={message.read}/>\n                                </div>\n                            );\n\n                            if (message.type === \"text\") {\n                                return (\n                                    <span>\n                                    {messageDeliveryStatus}\n                                        {message.data}\n                                </span>\n                                );\n                            } else if (message.type === \"image\") {\n                                return (\n                                    <span>\n                                    {messageDeliveryStatus}\n                                        <i className=\"far fa-file-image\"> </i> image\n                                </span>\n                                );\n                            } else if (message.type === \"video\") {\n                                return (\n                                    <span>\n                                    {messageDeliveryStatus}\n                                        <i className=\"far fa-file-video\"> </i> video\n                                </span>\n                                );\n                            } else if (message.type === \"document\") {\n                                return (\n                                    <span>\n                                    {messageDeliveryStatus}\n                                        <i className=\"far fa-file\"> </i> document\n                                </span>\n                                );\n                            }\n                        }\n                        return \"\";\n                    })(),\n                };\n            });\n        if (this.state.search.length > 0 && filteredList.length === 0 && !this.props.loadingList && this.props.more) {\n            this.props.searchPerson(this.state.search);\n        }\n        if (this.props.loadingList && this.state.search.length === 0) {\n            this.props.noLoadingList();\n        }\n        return filteredList;\n    };\n\n    render() {\n        return (\n            <div className=\"chat-list\">\n                <ChatSearchBar\n                    onSearch={this.onSearch}\n                />\n                <ChatListItems\n                    list={this.getFilteredList()}\n                    currentChatId={this.props.chat.currentChatId}\n                    updateCurrentChat={this.props.updateCurrentChat}\n                    loadingList={this.props.loadingList}\n                />\n            </div>\n        )\n    }\n}\n\nclass ChatHeader extends React.Component {\n    static propTypes = {\n        avatar: PropTypes.string,\n        name: PropTypes.string,\n        time: PropTypes.number,\n        closeCurrentChat: PropTypes.func,\n    };\n\n    componentDidMount() {\n        this.interval = setInterval(() => {\n            this.forceUpdate();\n        }, 2500);\n    }\n\n    getStatusWithTimestamp = () => {\n        const {time} = this.props;\n\n        return utils.getTimeAgo(time);\n    };\n\n    componentWillUnmount() {\n        clearInterval(this.interval);\n    }\n\n    render() {\n        return (\n            <div className=\"chat-header\">\n                <div className=\"chat-list-item-image\">\n                    <img src={this.props.avatar} alt=\"\"/>\n                    {\n                        this.getStatusWithTimestamp() === \"online\" ?\n                            <Notify size={\"8\"} position={\"bottom-right\"} color=\"lawngreen\"/> : null\n                    }\n                </div>\n                <div className=\"chat-list-item-info\">\n                    <div className=\"chat-list-item-name\">\n                        {this.props.name}\n                    </div>\n                    <div className=\"chat-list-item-desc\">\n                        {this.getStatusWithTimestamp()}\n                    </div>\n                </div>\n                <div className=\"chat-close\" onClick={this.props.closeCurrentChat}>\n                    <i className=\"fas fa-times\"> </i>\n                </div>\n            </div>\n        );\n    }\n}\n\nclass ChatLine extends React.Component {\n    static propTypes = {\n        message: PropTypes.object,\n        chatType: PropTypes.string,\n        onLoad: PropTypes.func,\n    };\n\n    static contextTypes = {\n        showFullScreen: PropTypes.func,\n    };\n\n    static defaultProps = {\n        by: 0,\n    };\n\n    showFullScreen = () => {\n        const {message} = this.props;\n\n        switch (message.type) {\n            case 'image': // noinspection JSDeprecatedSymbols\n                this.context.showFullScreen(message.data.image, 'image');\n                break;\n            case 'video': // noinspection JSDeprecatedSymbols\n                this.context.showFullScreen(message.data.video, 'video');\n                break;\n            default:\n        }\n    };\n\n    downloadFile = () => {\n        const {message} = this.props;\n\n        download(message.data.file);\n    };\n\n    getTime = () => {\n        const {message: {time}} = this.props;\n        return utils.getFormattedTime(time);\n    };\n\n    getConvertedMessage = (text) => {\n        let textAndLinks = utils.linksSplitter(text);\n        let link = null;\n\n        return [textAndLinks.map(item => {\n            if (item.type === \"link\") {\n                link = item.word;\n                return <a href={item.word}>{item.word}</a>;\n            }\n            return item.word;\n        }), link];\n    };\n\n    render() {\n        const {message} = this.props;\n\n        let data = null;\n\n        switch (message.type) {\n            case \"text\":\n                let linkAndMessage = this.getConvertedMessage(message.data);\n                data = (\n                    <div>\n                        {\n                            !!linkAndMessage[1] &&\n                            <div className=\"chat-url_metadata\" onClick={this.showFullScreen}>\n                                <URLMetadata url={linkAndMessage[1]}/>\n                            </div>\n                        }\n                        {linkAndMessage[0]}\n                    </div>\n                );\n                break;\n            case \"image\":\n                data = (\n                    <div>\n                        <div className=\"chat-line-image\" onClick={this.showFullScreen}>\n                            <img src={message.data.image} alt=\"\" onLoad={this.props.onLoad}/>\n                        </div>\n                        {this.getConvertedMessage(message.data.caption)}\n                    </div>\n                );\n                break;\n            case \"video\":\n                data = (\n                    <div>\n                        <div className=\"chat-line-video\" onClick={this.showFullScreen}>\n                            <VideoThumbnail videoUrl={message.data.video} onLoad={this.props.onLoad}/>\n                            <div className=\"chat-video-play-icon\">\n                                <i className=\"fa fa-play\"> </i>\n                            </div>\n                        </div>\n                        {this.getConvertedMessage(message.data.caption)}\n                    </div>\n                );\n                break;\n            case \"document\":\n                data = (\n                    <div>\n                        <div className=\"chat-line-document\" onClick={this.downloadFile}>\n                            <i className=\"fa fa-file\"> </i>\n                            <div className=\"chat-line-document-name\">\n                                {message.data.file.replace(/^.*[\\\\/]/, '')}\n                            </div>\n                        </div>\n                        {this.getConvertedMessage(message.data.caption)}\n                    </div>\n                );\n                break;\n            default:\n        }\n\n        let message_by = message.by === 0 ? \"me\" : \"you\";\n\n        return (\n            <div className=\"chat-line\">\n                <div className={`chat-line-wrapper ${message_by}`}>\n                    {\n                        this.props.chatType === \"group\" && message.by !== 0 &&\n                        <div className={`chat-message_by ${message_by}`}>\n                            {message.by}\n                        </div>\n                    }\n                    {data}\n                    <div className={`chat-message-time ${message_by}`}>\n                        {this.getTime()}\n                        {\n                            message.by === 0 &&\n                            <div className=\"chat-message_delivery_status\">\n                                <MessageDeliveryStatusIcons status={message.read}/>\n                            </div>\n                        }\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nclass DateMarker extends React.Component {\n    static propTypes = {\n        date: PropTypes.number,\n    };\n\n    render() {\n        return (\n            <div className=\"chat-line\">\n                <div className=\"chat-date_marker\">\n                    {utils.getFormattedDate(this.props.date)}\n                </div>\n            </div>\n        );\n    }\n}\n\n// class ChatNewMessagesIcon extends React.Component {\n//     static propTypes = {\n//         unread: PropTypes.number,\n//     };\n//\n//     render() {\n//         return (\n//             <div className=\"chat-new-message-icon\">\n//                 <i className=\"fas fa-chevron-down\"> </i>\n//                 {\n//                     this.props.unread > 0 &&\n//                     <div className=\"chat-new-message-number-icon\">\n//                         {this.props.unread}\n//                     </div>\n//                 }\n//             </div>\n//         );\n//     }\n// }\n\nclass ChatContent extends React.Component {\n    static propTypes = {\n        messages: PropTypes.array,\n        removeUnreadPointer: PropTypes.func,\n        currentChatId: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n        loadPreviousChat: PropTypes.func,\n        hasPreviousChat: PropTypes.bool,\n        chatType: PropTypes.string,\n        updateScrollerPosition: PropTypes.func,\n        scrollerPosition: PropTypes.number,\n        newMessageByMe: PropTypes.bool,\n        cleanNewMessageByMe: PropTypes.func,\n        newMessage: PropTypes.bool,\n        unreadMsgCount: PropTypes.number,\n        loadingMessages: PropTypes.bool,\n        notify: PropTypes.bool\n    };\n\n    constructor(props) {\n        super(props);\n        this.autoScroll = false;\n    }\n\n    componentDidMount() {\n        if (this.unreadPointer) {\n            this.unreadPointer.scrollIntoView();\n        } else {\n            let {scrollerPosition} = this.props;\n            if (scrollerPosition) {\n                console.log(\"ScrollerPositionThere\");\n                this.chatContent.scrollTop = scrollerPosition;\n                console.log(scrollerPosition);\n            } else {\n                this.endPointer.scrollIntoView();\n            }\n        }\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (this.previousChatUpdate && !this.props.loadingMessages) {\n            this.chatContent.scrollTop = this.chatContent.scrollHeight - snapshot.previousScrollHeight;\n            this.previousChatUpdate = false;\n            if (this.unreadPointer) {\n                this.props.removeUnreadPointer(this.props.currentChatId);\n            }\n        } else if (this.props.newMessageByMe) {\n            if (snapshot.previousAutoScroll) {\n                this.endPointer.scrollIntoView({\n                    behavior: \"smooth\",\n                });\n                this.autoScroll = true;\n            } else {\n                this.endPointer.scrollIntoView();\n            }\n            this.props.cleanNewMessageByMe();\n            if (this.unreadPointer) {\n                this.props.removeUnreadPointer(this.props.currentChatId);\n            }\n        }\n        if (snapshot.previousAutoScroll) {\n            this.endPointer.scrollIntoView({\n                behavior: \"smooth\",\n            });\n            this.autoScroll = true;\n        }\n    }\n\n    getSnapshotBeforeUpdate(prevProps, prevState) {\n        console.log(\"autoScroll: \", this.autoScroll);\n        return {\n            previousScrollHeight: this.chatContent.scrollHeight,\n            previousAutoScroll: this.autoScroll,\n        }\n    }\n\n    componentWillUnmount() {\n        if (this.unreadPointer) {\n            this.props.removeUnreadPointer(this.props.currentChatId);\n        }\n        this.props.updateScrollerPosition(this.chatContent.scrollTop, this.props.currentChatId);\n    }\n\n    onScroll = ({target: {scrollTop, scrollHeight, clientHeight}}) => {\n        if (scrollTop === 0 && this.props.hasPreviousChat) {\n            this.loadPreviousChat();\n        }\n\n        this.autoScroll = scrollTop === scrollHeight - clientHeight;\n        console.log(\"autoScroll: \", this.autoScroll);\n    };\n\n    // scrollDiv = (event) => {\n    //     this.chatContent.scrollBy(event.deltaX, event.deltaY);\n    // };\n\n    loadPreviousChat = () => {\n        this.previousChatUpdate = true;\n        this.props.loadPreviousChat(this.props.currentChatId);\n    };\n\n    createMessagesWithDateObjects = () => {\n        let {messages} = this.props;\n\n        return messages.reduce((accumulator, currentMessage) => {\n            let {messages, currentDate} = accumulator;\n            let newDate = new Date(currentMessage.time);\n\n            if (!currentMessage.time\n                || (currentDate.getFullYear() === newDate.getFullYear()\n                    && currentDate.getMonth() === newDate.getMonth()\n                    && currentDate.getDate() === newDate.getDate())) {\n            } else {\n                messages.push({\n                    dateMarker: currentMessage.time,\n                });\n                accumulator.currentDate = newDate;\n            }\n            accumulator.messages.push(currentMessage);\n\n            return accumulator;\n        }, {\n            messages: [],\n            currentDate: new Date(0),\n        }).messages;\n    };\n\n    render() {\n        const messages = this.createMessagesWithDateObjects();\n\n        return (\n            <>\n                <div\n                    className=\"chat-content\"\n                    ref={(inp) => this.chatContent = inp}\n                    onScroll={this.onScroll}\n                >\n                    {\n                        this.props.loadingMessages && (\n                            <div className=\"chat-line loading\">\n                                <Loading/>\n                            </div>\n                        )\n                    }\n                    {\n                        messages.map(message => {\n                            if (message.unreadPointer) {\n                                return (\n                                    <div\n                                        key=\"unreadPointer\"\n                                        className=\"chat-line\"\n                                    >\n                                        <div\n                                            className=\"chat-unread_messages\"\n                                            ref={(div) => {\n                                                this.unreadPointer = div;\n                                            }}\n                                        >\n                                            Unread Messages\n                                        </div>\n                                    </div>\n                                )\n                            }\n                            if (message.dateMarker) {\n                                return (\n                                    <DateMarker\n                                        key={`date-${message.dateMarker}`}\n                                        date={message.dateMarker}\n                                    />\n                                )\n                            }\n                            return (\n                                <ChatLine\n                                    message={message}\n                                    key={message.id}\n                                    chatType={this.props.chatType}\n                                    // onLoad={this.scrollToEndPointer}\n                                />\n                            );\n                        })\n                    }\n                    <div\n                        ref={(div) => {\n                            this.endPointer = div;\n                        }}\n                    >\n                    </div>\n                </div>\n                {/*<div*/}\n                {/*    className=\"chat-content-overflow_control_wrap\"*/}\n                {/*    onWheel={this.scrollDiv}*/}\n                {/*>*/}\n                {/*    {*/}\n                {/*        !this.autoScroll &&*/}\n                {/*        <ChatNewMessagesIcon*/}\n                {/*            unread={this.props.unreadMsgCount}*/}\n                {/*            onClick={() => {*/}\n                {/*                this.unreadPointer.scrollIntoView()*/}\n                {/*            }}*/}\n                {/*        />*/}\n                {/*    }*/}\n                {/*</div>*/}\n            </>\n        );\n    }\n}\n\nclass EmojiPanelButton extends React.Component {\n    static propTypes = {\n        onEmojiSelect: PropTypes.func,\n    };\n\n    state = {\n        showEmojiPanel: false,\n    };\n\n    toggleEmojiPanel = () => {\n        this.setState({\n            showEmojiPanel: !this.state.showEmojiPanel,\n        });\n    };\n\n    render() {\n        const {onEmojiSelect, ...buttonProps} = this.props;\n        return (\n            <span style={{position: \"relative\"}}>\n                <button className=\"emoji\" onClick={this.toggleEmojiPanel} {...buttonProps}>\n                    {this.props.children}\n                </button>\n                {\n                    this.state.showEmojiPanel &&\n                    <EmojiPicker\n                        set='google'\n                        style={{\n                            position: \"absolute\",\n                            bottom: \"30px\",\n                            right: \"0\",\n                        }}\n                        onSelect={onEmojiSelect}\n                    />\n                }\n            </span>\n        );\n    }\n}\n\nclass MessageInputWithURLMetadata extends React.Component {\n    static propTypes = {\n        reference: PropTypes.func,\n        message: PropTypes.string,\n        onChange: PropTypes.func,\n        link: PropTypes.string,\n    };\n\n    render() {\n        return (\n            <div className=\"chat-message-input\">\n                <input\n                    type=\"text\"\n                    onChange={this.props.onChange}\n                    value={this.props.message}\n                    ref={(inp) => this.props.reference(inp)}\n                    className=\"message_input\"\n                />\n                {\n                    !!this.props.link &&\n                    <div className=\"chat-input-link-metadata\">\n                        <URLMetadata key={this.props.link} url={this.props.link}/>\n                    </div>\n                }\n            </div>\n        );\n    }\n}\n\nclass FileButton extends React.Component {\n    static propTypes = {\n        onFileSelected: PropTypes.func,\n        maxFileSize: PropTypes.number,\n        accept: PropTypes.string,\n        notify: PropTypes.func,\n    };\n\n    constructor(props) {\n        super(props);\n        this.fileSelector = React.createRef();\n    }\n\n    onButtonClick = () => {\n        this.fileSelector.current.click();\n    };\n\n    fileSelected = (event) => {\n        const {onFileSelected} = this.props;\n\n        const selectedFile = event.target.files[0];\n        if (selectedFile) {\n            console.log(\"File Selected\");\n            console.log(selectedFile);\n            if (this.props.maxFileSize) {\n                if (selectedFile.size > this.props.maxFileSize) {\n                    console.log(\"File Size limit exceeded\");\n                    this.props.notify(`Max File Size limit exceeded ${this.props.maxFileSize} bytes`);\n                    return;\n                }\n            }\n            onFileSelected(selectedFile);\n        } else {\n            console.log(\"File Deselected\");\n            onFileSelected(null);\n        }\n    };\n\n    render() {\n        const {onFileSelected, accept, ...remainingProps} = this.props;\n        return (\n            <>\n                <button {...remainingProps} onClick={this.onButtonClick}>\n                    {this.props.children}\n                </button>\n                <input\n                    type=\"file\"\n                    ref={this.fileSelector}\n                    style={{display: \"none\"}}\n                    onChange={this.fileSelected}\n                    accept={accept}\n                />\n            </>\n        );\n    }\n}\n\nclass AttachmentsButton extends React.Component {\n    static propTypes = {\n        onAttachment: PropTypes.func,\n        fileSelected: PropTypes.bool,\n        fileType: PropTypes.string,\n        notify: PropTypes.func,\n    };\n\n    state = {\n        showAttachmentsPanel: false,\n    };\n\n    toggleAttachmentPanel = () => {\n        this.setState({\n            showAttachmentsPanel: !this.state.showAttachmentsPanel,\n        });\n    };\n\n    imageSelected = (file) => {\n        const {onAttachment} = this.props;\n\n        if (file) {\n            onAttachment(file, \"image\");\n        } else {\n            onAttachment(null, null);\n        }\n    };\n\n    videoSelected = (file) => {\n        const {onAttachment} = this.props;\n\n        if (file) {\n            onAttachment(file, \"video\");\n        } else {\n            onAttachment(null, null);\n        }\n    };\n\n    documentSelected = (file) => {\n        const {onAttachment} = this.props;\n\n        if (file) {\n            onAttachment(file, \"document\");\n        } else {\n            onAttachment(null, null);\n        }\n    };\n\n    cancelAttachment = () => {\n        const {onAttachment} = this.props;\n        onAttachment(null, null);\n    };\n\n    render() {\n        const {className, onAttachment, fileSelected, fileType, ...buttonProps} = this.props;\n        const chatFileSelected = fileSelected ? \"chat-file-selected\" : \"\";\n        const chatImageSelected = fileType === \"image\" ? \"chat-file-selected\" : \"\";\n        const chatVideoSelected = fileType === \"video\" ? \"chat-file-selected\" : \"\";\n        const chatDocumentSelected = fileType === \"document\" ? \"chat-file-selected\" : \"\";\n\n        const maxFileSize = 24 * 1024 * 1024;\n\n        return (\n            <span style={{position: \"relative\"}}>\n                <button className={`${className} ${chatFileSelected}`}\n                        onClick={this.toggleAttachmentPanel} {...buttonProps}>\n                    {this.props.children}\n                </button>\n                {\n                    this.state.showAttachmentsPanel &&\n                    <div className=\"chat-attachments-panel\">\n                        <FileButton type=\"button\" className={`chat-attachment-button ${chatImageSelected}`}\n                                    maxFileSize={maxFileSize}\n                                    onFileSelected={this.imageSelected} accept=\"image/*\" notify={this.props.notify}>\n                            <i className=\"fas fa-image\"> </i>\n                        </FileButton>\n                        <FileButton type=\"button\" className={`chat-attachment-button ${chatVideoSelected}`}\n                                    maxFileSize={maxFileSize}\n                                    onFileSelected={this.videoSelected} accept=\"video/*\" notify={this.props.notify}>\n                            <i className=\"fas fa-video\"> </i>\n                        </FileButton>\n                        <FileButton type=\"button\" className={`chat-attachment-button ${chatDocumentSelected}`}\n                                    maxFileSize={maxFileSize}\n                                    onFileSelected={this.documentSelected} notify={this.props.notify}>\n                            <i className=\"fas fa-file\"> </i>\n                        </FileButton>\n                        <button type=\"button\" className=\"chat-attachment-button\" onClick={this.cancelAttachment}>\n                            <i className=\"fas fa-times\"> </i>\n                        </button>\n                    </div>\n                }\n            </span>\n        );\n    }\n}\n\nclass ChatInput extends React.Component {\n    static propTypes = {\n        updateMessage: PropTypes.func,\n        notify: PropTypes.func,\n    };\n\n    state = {\n        message: \"\",\n        type: \"text\",\n        link: null,\n        file: null,\n        fileSelected: false,\n    };\n\n    getLink = text => {\n        let link = utils.linksSplitter(text).lastFind(item => item.type === \"link\");\n        return link ? link.word : null;\n    };\n\n    onMessageInput = ({target: {value: message}}) => {\n        let link = null;\n        if (this.state.type === \"text\") {\n            link = this.getLink(message);\n        }\n        this.setState({\n            message,\n            link,\n        });\n    };\n\n    onAttachment = (file, type) => {\n        if (type) {\n            this.setState({\n                file: file,\n                type: type,\n                fileSelected: true,\n            });\n        } else {\n            this.setState({\n                file: null,\n                type: \"text\",\n                fileSelected: false,\n            });\n        }\n    };\n\n    onMessageSubmit = (event) => {\n        const maxTextLength = 10240;\n\n        event.preventDefault();\n        if (this.state.type === \"text\" && this.state.message.match(utils.onlySpacesRegex)) {\n            return;\n        }\n        if (this.state.message.length > maxTextLength) {\n            this.props.notify(\"Message too long. Max limit reached only 10240 characters allowed.\");\n            return;\n        }\n        const {updateMessage} = this.props;\n\n        let message = {\n            data: this.state.message,\n            type: this.state.type,\n            id: -100,\n            by: 0,\n            time: Date.now(),\n            read: 0,\n            file: this.state.file,\n        };\n\n        this.setState({\n            message: \"\",\n            type: \"text\",\n            link: null,\n            file: null,\n            fileSelected: false,\n        });\n\n        updateMessage(message);\n    };\n\n    emojiUpdate = (emoji) => {\n        this.setState({\n            message: this.state.message + emoji.native,\n        });\n        this.messageInput.focus();\n    };\n\n    render() {\n        return (\n            <form onSubmit={this.onMessageSubmit}>\n                <div className=\"chat-input\">\n                    <MessageInputWithURLMetadata\n                        message={this.state.message}\n                        reference={(inp) => this.messageInput = inp}\n                        onChange={this.onMessageInput}\n                        link={this.state.link}\n                    />\n                    <button type=\"submit\" className=\"button\"><i className=\"far fa-paper-plane\"> </i></button>\n                    <AttachmentsButton\n                        type=\"button\"\n                        className=\"button\"\n                        onAttachment={this.onAttachment}\n                        fileSelected={this.state.fileSelected}\n                        fileType={this.state.type}\n                        notify={this.props.notify}\n                    >\n                        <i className=\"fas fa-paperclip\"> </i>\n                    </AttachmentsButton>\n                    <EmojiPanelButton type=\"button\" className=\"button\" onEmojiSelect={this.emojiUpdate}>\n                        <i className=\"far fa-smile\"> </i>\n                    </EmojiPanelButton>\n                </div>\n            </form>\n        );\n    }\n}\n\nclass ChatBody extends React.Component {\n    static propTypes = {\n        currentChat: PropTypes.object,\n        currentChatId: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n        updateMessage: PropTypes.func,\n        closeCurrentChat: PropTypes.func,\n        unreadMsgCount: PropTypes.number,\n        removeUnreadPointer: PropTypes.func,\n        loadPreviousChat: PropTypes.func,\n        updateScrollerPosition: PropTypes.func,\n        scrollerPosition: PropTypes.number,\n        notify: PropTypes.func,\n    };\n\n    state = {\n        newMessageByMe: false,\n    };\n\n    cleanNewMessageByMe = () => {\n        this.setState({\n            newMessageByMe: false,\n        });\n    };\n\n    updateNewMessageByMe = () => {\n        this.setState({\n            newMessageByMe: true,\n        });\n    };\n\n    updateMessage = (message) => {\n        let {currentChatId} = this.props;\n\n        this.updateNewMessageByMe();\n        this.props.updateMessage(currentChatId, message);\n    };\n\n    render() {\n        const {currentChatId, currentChat} = this.props;\n\n        return (\n            <div className=\"chat-body\">\n                <ChatHeader\n                    name={currentChat.name}\n                    time={currentChat.lastSeen}\n                    avatar={currentChat.avatar}\n                    closeCurrentChat={this.props.closeCurrentChat}\n                />\n                <ChatContent\n                    hasPreviousChat={currentChat.hasPreviousChat}\n                    currentChatId={currentChatId}\n                    messages={currentChat.messages}\n                    unreadMsgCount={this.props.unreadMsgCount}\n                    removeUnreadPointer={this.props.removeUnreadPointer}\n                    loadPreviousChat={this.props.loadPreviousChat}\n                    chatType={currentChat.chatType}\n                    scrollerPosition={this.props.scrollerPosition}\n                    updateScrollerPosition={this.props.updateScrollerPosition}\n                    newMessageByMe={this.state.newMessageByMe}\n                    newMessage={currentChat.newMessage}\n                    cleanNewMessageByMe={this.cleanNewMessageByMe}\n                    loadingMessages={currentChat.loadingMessages}\n                    notify={this.props.notify}\n                />\n                <ChatInput\n                    updateMessage={this.updateMessage}\n                    notify={this.props.notify}\n                />\n            </div>\n        )\n    }\n}\n\nexport default class Chat extends React.Component {\n    static propTypes = {\n        chat: PropTypes.object.isRequired,\n        updateCurrentChat: PropTypes.func,\n        updateMessage: PropTypes.func,\n        closeCurrentChat: PropTypes.func,\n        removeUnreadPointer: PropTypes.func,\n        loadPreviousChat: PropTypes.func,\n        markAsReadCurrentChat: PropTypes.func,\n        searchPerson: PropTypes.func,\n        noLoadingList: PropTypes.func,\n        notify: PropTypes.func,\n    };\n\n    state = {\n        scrollerPositions: {},\n    };\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        const {chat: {currentChatId}, markAsReadCurrentChat} = this.props;\n        const currentChat = this.props.chat.list.find(listItem => listItem.id === currentChatId);\n\n        if (currentChatId && currentChat.newMessage) {\n            markAsReadCurrentChat(currentChatId);\n        }\n    }\n\n    updateScrollerPosition = (scrollerPosition, chatId) => {\n        this.setState((prevState) => {\n            let newScrollerPositions = {\n                ...prevState.scrollerPositions,\n            };\n            newScrollerPositions[chatId] = scrollerPosition;\n\n            return {\n                scrollerPositions: newScrollerPositions,\n            }\n        });\n    };\n\n    render() {\n        const {currentChatId} = this.props.chat;\n        const currentChat = this.props.chat.list.find(listItem => listItem.id === currentChatId);\n\n        return (\n            <div className=\"chat\">\n                <ChatList\n                    loadingList={this.props.chat.loadingList}\n                    chat={this.props.chat}\n                    updateCurrentChat={this.props.updateCurrentChat}\n                    searchPerson={this.props.searchPerson}\n                    more={this.props.chat.more}\n                    noLoadingList={this.props.noLoadingList}\n                />\n                {\n                    currentChatId && currentChat &&\n                    <ChatBody\n                        currentChat={currentChat}\n                        currentChatId={currentChatId}\n                        updateMessage={this.props.updateMessage}\n                        closeCurrentChat={this.props.closeCurrentChat}\n                        unreadMsgCount={currentChat.unread}\n                        removeUnreadPointer={this.props.removeUnreadPointer}\n                        loadPreviousChat={this.props.loadPreviousChat}\n                        updateScrollerPosition={this.updateScrollerPosition}\n                        scrollerPosition={this.state.scrollerPositions[currentChatId]}\n                        key={`chat-${currentChatId}`}\n                        notify={this.props.notify}\n                    />\n                }\n            </div>\n        );\n    }\n}","import React, {useState} from \"react\";\nimport ReactPlayer from 'react-player';\n\nimport \"./Assets/css/full-screen.css\";\n\nexport const FullScreenContext = React.createContext({});\n\nexport default function FullScreenView({children}) {\n    const [fullScreen, setFullScreen] = useState({\n        content: null,\n        type: null,\n        isFullScreen: false,\n    });\n\n    const showFullScreen = (content, type) => {\n        setFullScreen({\n            content,\n            type,\n            isFullScreen: true,\n        });\n    };\n\n    const hideFullScreen = () => {\n        setFullScreen({\n            content: null,\n            type: null,\n            isFullScreen: false,\n        });\n    };\n\n    let view = null;\n    if (fullScreen.isFullScreen) {\n        if (fullScreen.type === \"image\") {\n            view = (\n                <div className=\"image-view\">\n                    <img src={fullScreen.content} alt=\"view\"/>\n                </div>\n            );\n        } else if (fullScreen.type === \"video\") {\n            view = (\n                <div className=\"image-view\">\n                    <ReactPlayer\n                        url={fullScreen.content}\n                        controls\n                        playing\n                        width='100%'\n                        height='100%'\n                    />\n                </div>\n            );\n        } else if (fullScreen.type === \"ReactElement\") {\n            view = (\n                <div className=\"image-view\">\n                    {fullScreen.content}\n                </div>\n            );\n        }\n    }\n\n    return (\n        <FullScreenContext.Provider value={showFullScreen}>\n            <div>\n                {children}\n                {\n                    fullScreen.isFullScreen ?\n                        <div className=\"full-screen\">\n                            <div\n                                className=\"exit\"\n                                onClick={hideFullScreen}\n                            >\n                                &times;\n                            </div>\n                            <div className=\"content centered\">\n                                {view}\n                            </div>\n                        </div> : null\n                }\n            </div>\n        </FullScreenContext.Provider>\n    );\n}","import React from 'react';\nimport Chat from './Components/Chat';\nimport uuid from 'uuid';\n\nimport './App.css';\nimport FullScreenView from \"./Components/FullScreenView\";\n\nclass App extends React.Component {\n    state = {\n        chat: {\n            loadingList: false,\n            more: true,\n            list: [\n                {\n                    id: 1,\n                    name: \"Vishal\",\n                    avatar: require(\"./Assets/images/Avatar.png\"),\n                    latestMessageTime: 20,\n                    loadingMessages: false,\n                    messages: [\n                        {\n                            id: 1,\n                            by: \"you\",\n                            data: \"222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222\",\n                            time: 1, type: \"text\",\n                            sendSeen: false,\n                        },\n                        {\n                            id: 2,\n                            by: 0,\n                            data: \"2222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222\",\n                            time: 2, type: \"text\",\n                            read: 0 // wait\n                        },\n                        {\n                            id: 3,\n                            by: 0,\n                            data: \"Hello\",\n                            time: 3,\n                            type: \"text\",\n                            read: 1 // delivered to server\n                        },\n                        {\n                            id: 4,\n                            by: \"you\",\n                            data: \"Hi\",\n                            time: 4,\n                            type: \"text\",\n                            sendSeen: false,\n                        },\n                        {\n                            unreadPointer: true,\n                        },\n                        {\n                            id: 5,\n                            by: 0,\n                            data: {\n                                image: require(\"./Assets/images/trial.png\"),\n                                caption: \"Another Caption for image\"\n                            },\n                            time: 5,\n                            type: \"image\",\n                            read: 2, // read\n                        },\n                        {\n                            id: 7,\n                            by: \"you\",\n                            data: {\n                                video: require(\"./Assets/videos/trial.mp4\"),\n                                caption: \"Avengers End Game\",\n                            },\n                            type: \"video\",\n                            time: 6,\n                            sendSeen: false,\n                        },\n                        {\n                            id: 6,\n                            by: 0,\n                            data: {\n                                image: require(\"./Assets/images/trial.png\"),\n                                caption: \"A best Avatar Caption\",\n                            },\n                            type: \"image\",\n                            time: 7,\n                            read: 3, // read\n                        },\n                        {\n                            id: 6,\n                            by: 0,\n                            data: {\n                                file: require(\"./Assets/images/trial.png\"),\n                                name: \"A best Avatar Caption gfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\",\n                                caption: \"A file caption \",\n                            },\n                            type: \"document\",\n                            time: 7,\n                            read: 3, // read\n                        },\n                    ],\n                    lastSeen: Date.now(),\n                    unread: 3,\n                    hasPreviousChat: true,\n                    chatType: \"group\",\n                    newMessage: true,\n                }, {\n                    id: 2,\n                    name: \"Vishnu\",\n                    avatar: require(\"./Assets/images/Avatar.png\"),\n                    latestMessageTime: 30,\n                    loadingMessages: true,\n                    messages: [\n                        {id: 1, by: 0, data: \"Hello\", time: 1, type: \"text\"},\n                        {id: 2, by: \"you\", data: \"Hi\", time: 2, type: \"text\"},\n                        {id: 3, by: 0, data: \"Hello\", time: 3, type: \"text\"},\n                        {id: 4, by: \"you\", data: \"Hi\", time: 4, type: \"text\"},\n                    ],\n                    lastSeen: 2,\n                    unread: 0,\n                    hasPreviousChat: false,\n                    chatType: \"individual\",\n                    newMessage: false,\n                },\n            ],\n            currentChatId: null,\n        },\n    };\n\n    searchPerson = () => {\n        this.setState({\n            chat: {\n                ...this.state.chat,\n                loadingList: true\n            }\n        });\n        setTimeout(() => {\n            if (this.state.chat.more) {\n                this.setState((prevState) => {\n                    return {\n                        chat: {\n                            ...prevState.chat,\n                            more: false,\n                            loadingList: false,\n                            list: [\n                                ...prevState.chat.list,\n                                {\n                                    id: uuid.v4(),\n                                    name: \"Tony Stark\",\n                                    avatar: require(\"./Assets/images/Avatar.png\"),\n                                    messages: [],\n                                    lastSeen: 2,\n                                    unread: 0,\n                                    hasPreviousChat: false,\n                                    chatType: \"individual\",\n                                    newMessage: false,\n                                },\n                            ],\n                        }\n                    }\n                });\n            }\n        }, 3000);\n    };\n\n    updateCurrentChat = (id) => {\n        this.setState((prevState) => {\n            return {\n                chat: {\n                    ...prevState.chat,\n                    currentChatId: id,\n                    list: prevState.chat.list.map(listItem => {\n                        if (listItem.id === id) {\n                            return {\n                                ...listItem,\n                                unread: 0,\n                            };\n                        }\n                        return listItem;\n                    }),\n                }\n            }\n        });\n    };\n\n    removeUnreadPointer = (id) => {\n        this.setState((prevState) => {\n            return {\n                chat: {\n                    ...prevState.chat,\n                    list: prevState.chat.list.map(listItem => {\n                        if (listItem.id === id) {\n                            return {\n                                ...listItem,\n                                messages: listItem.messages.filter(message => message.unreadPointer !== true),\n                            };\n                        }\n                        return listItem;\n                    }),\n                }\n            }\n        });\n    };\n\n    closeCurrentChat = () => {\n        this.setState({\n            chat: {\n                ...this.state.chat,\n                currentChatId: null,\n            }\n        })\n    };\n\n    loadPreviousChat = (id) => {\n        const currentChat = this.state.chat.list.find(listItem => listItem.id === id);\n\n        this.setState((prevState) => {\n            return {\n                chat: {\n                    ...prevState.chat,\n                    list: prevState.chat.list.map(listItem => {\n                        return {\n                            ...listItem,\n                            loadingMessages: true,\n                        }\n                    })\n                }\n            };\n        });\n\n\n        setTimeout(() => {\n            this.setState((prevState) => {\n                return {\n                    chat: {\n                        ...prevState.chat,\n                        list: prevState.chat.list.map(listItem => {\n                            if (listItem.id === id) {\n                                return {\n                                    ...listItem,\n                                    loadingMessages: false,\n                                    messages: [\n                                        {id: uuid.v4(), by: 0, data: \"Previous Message\", time: 1, type: \"text\"},\n                                        {id: uuid.v4(), by: \"Arun\", data: \"Previous Message\", time: 1, type: \"text\"},\n                                        ...listItem.messages,\n                                    ],\n                                };\n                            }\n                            return listItem;\n                        }),\n                    }\n                }\n            });\n        }, 3000);\n    };\n\n    updateMessage = (id, message) => {\n        const {type, file} = message;\n        let self = this;\n        if (type === \"text\") {\n            self.setState((prevState) => {\n                return {\n                    chat: {\n                        ...prevState.chat,\n                        list: prevState.chat.list.map(listItem => {\n                            if (listItem.id === id) {\n                                return {\n                                    ...listItem,\n                                    messages: [\n                                        ...listItem.messages,\n                                        message,\n                                    ],\n                                };\n                            }\n                            return listItem;\n                        }),\n                    }\n                };\n            });\n        } else {\n            if (FileReader && file) {\n                let fileReader = new FileReader();\n                fileReader.onload = function () {\n                    if (type === \"image\") {\n                        message = {\n                            ...message,\n                            data: {\n                                image: fileReader.result,\n                                caption: message.data,\n                            }\n                        };\n                    } else if (type === \"video\") {\n                        message = {\n                            ...message,\n                            data: {\n                                video: fileReader.result,\n                                caption: message.data,\n                            }\n                        };\n                    } else if (type === \"document\") {\n                        message = {\n                            ...message,\n                            data: {\n                                file: fileReader.result,\n                                caption: message.data,\n                            }\n                        };\n                    }\n                    self.setState((prevState) => {\n                        return {\n                            chat: {\n                                ...prevState.chat,\n                                list: prevState.chat.list.map(listItem => {\n                                    if (listItem.id === id) {\n                                        return {\n                                            ...listItem,\n                                            messages: [\n                                                ...listItem.messages,\n                                                message,\n                                            ],\n                                        };\n                                    }\n                                    return listItem;\n                                }),\n                            }\n                        };\n                    });\n                };\n                fileReader.readAsDataURL(file);\n            }\n\n            // Not supported\n            else {\n                // fallback -- perhaps submit the input to an iframe and temporarily store\n                // them on the server until the user's session ends.\n            }\n        }\n\n        // setTimeout(() => {\n        //     this.setState((prevState) => {\n        //         return {\n        //             chat: {\n        //                 ...prevState.chat,\n        //                 list: prevState.chat.list.map(listItem => {\n        //                     if (listItem.id === id) {\n        //                         return {\n        //                             ...listItem,\n        //                             messages: listItem.messages.map(message => {\n        //                                 if (message_id === message.id) {\n        //                                     return {\n        //                                         ...message,\n        //                                         read: 1,\n        //                                     }\n        //                                 }\n        //                                 return message;\n        //                             }),\n        //                         };\n        //                     }\n        //                     return listItem;\n        //                 }),\n        //             }\n        //         };\n        //     });\n        // }, 2500)\n    };\n\n    markAsReadCurrentChat = (id) => {\n        this.setState((prevState) => {\n            return {\n                chat: {\n                    ...prevState.chat,\n                    list: prevState.chat.list.map(listItem => {\n                        if (listItem.id === id) {\n                            return {\n                                ...listItem,\n                                messages: listItem.messages.map(message => {\n                                    if (message.id) {\n                                        if (message.sendSeen === false) {\n                                            console.log(\"Message Seen Delivery\");\n                                            return {\n                                                ...message,\n                                                sendSeen: true,\n                                            }\n                                        }\n                                        return message;\n                                    }\n                                    return message;\n                                }),\n                                newMessage: false,\n                            };\n                        }\n                        return listItem;\n                    }),\n                }\n            };\n        });\n    };\n\n    noLoadingList = () => {\n        this.setState((prevState) => {\n            return {\n                chat: {\n                    ...prevState.chat,\n                    loadingList: false,\n                }\n            };\n        });\n    };\n\n    render() {\n        return (\n            <FullScreenView>\n                <div className=\"App\">\n                    <Chat\n                        chat={this.state.chat}\n                        updateCurrentChat={this.updateCurrentChat}\n                        closeCurrentChat={this.closeCurrentChat}\n                        updateMessage={this.updateMessage}\n                        removeUnreadPointer={this.removeUnreadPointer}\n                        loadPreviousChat={this.loadPreviousChat}\n                        markAsReadCurrentChat={this.markAsReadCurrentChat}\n                        searchPerson={this.searchPerson}\n                        noLoadingList={this.noLoadingList}\n                    />\n                    {/*<URLMetadata url=\"https://www.whatsapp.com\"/>*/}\n                </div>\n            </FullScreenView>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}